package com.example.fptacademysystem.controller.rest;import com.example.fptacademysystem.model.Role;import com.example.fptacademysystem.services.RoleService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import org.springframework.boot.configurationprocessor.json.JSONObject;import org.springframework.boot.configurationprocessor.json.JSONException;import java.util.List;import java.util.logging.Level;import java.util.logging.Logger;@RestController@RequestMapping("/api/admin/role")public class RoleRestController {    @Autowired    RoleService roleService;    @RequestMapping(value = "/postCreate", produces = "application/json")    public String postCreate(@RequestBody Role role) {        JSONObject jsonObject = new JSONObject();        List<Role> listRole = roleService.findAll();        try {            for (Role r : listRole) {                if (r.getRolenm().equals(role.getRolenm())) {                    jsonObject.put("title", "error");                    jsonObject.put("message", "RoleName Has Existed!");                    return jsonObject.toString();                }            }            Role roleObject = new Role();            roleObject.setRolenm(role.getRolenm());            if (role.getDescriptions().isEmpty()) {                roleObject.setDescriptions("No Descrption");            } else {                roleObject.setDescriptions(role.getDescriptions());            }            roleService.createRole(roleObject);            jsonObject.put("title", "success");            jsonObject.put("message", "Successfully!");        } catch (JSONException ex) {            ex.printStackTrace();        }        return jsonObject.toString();    }    @RequestMapping(value = "/roleFind/{id}", produces = "application/json")    public String findRole(@PathVariable("id") int id) {        JSONObject jsonObject = new JSONObject();        try {            Role role = roleService.findRole(id);            jsonObject.put("roleid", role.getRoleid());            jsonObject.put("rolenm", role.getRolenm());            jsonObject.put("descriptions", role.getDescriptions());        } catch (JSONException ex) {            Logger.getLogger(RoleRestController.class.getName()).log(Level.SEVERE, null, ex);        }        return jsonObject.toString();    }    @RequestMapping(value = "/postEdit", produces = "application/json")    public String postEdit(@RequestBody Role role) {        JSONObject jsonObject = new JSONObject();        List<Role> listRole = roleService.findAll();        try {            for (Role r : listRole) {                if (r.getRolenm().equals(role.getRolenm())) {                    if (!(r.getRoleid() == role.getRoleid())) {                        jsonObject.put("title", "error");                        jsonObject.put("message", "RoleName Has Existed!");                        return jsonObject.toString();                    }                }            }            Role roleObject = new Role();            roleObject.setRoleid(role.getRoleid());            roleObject.setRolenm(role.getRolenm());            roleObject.setDescriptions(role.getDescriptions());            roleService.updateRole(roleObject);            jsonObject.put("title", "success");            jsonObject.put("message", "Successfully!");        } catch (JSONException ex) {            ex.printStackTrace();        }        return jsonObject.toString();    }    @RequestMapping(value = "/roleDelete/{id}")    public void deleteRole(@PathVariable("id")int id){        roleService.deleteRole(id);    }}