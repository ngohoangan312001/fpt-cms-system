package com.example.fptacademysystem.repository;import java.util.Date;import java.util.List;import com.example.fptacademysystem.model.*;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.Query;import org.springframework.data.repository.query.Param;import org.springframework.stereotype.Repository;@Repositorypublic interface StudentClassRepository extends JpaRepository<StudentClass, Integer> {//    @Query("SELECT s FROM StudentClass s where s.stugroid = :stugroid")//    List<StudentClass> findStudentByStudentGroupId(StudentGroup stugroid);////    @Query("SELECT s FROM StudentClass s where s.stuid = :stuid")//    List<StudentClass> findStudentGroupByStudentId(Student stuid);////    @Query("SELECT s FROM StudentClass s where s.stuid = :stuid and s.cass='current class'")//    List<StudentClass> findCurrentClassByStudentId(Student stuid);//////    @Query(value = "select * from student_class where stuid = ?1 and stugroid = ?2 and cass='current class'", nativeQuery = true)////    StudentClass findCurrentClassByStudentIdAndStugroid(int stuid, int stugroid);////    @Query(value = "select * from student_class where stuid = :stuid and stugroid = :stugroid", nativeQuery = true)//    StudentClass findCurrentClassByStudentIdAndStugroid(@Param("stuid")int stuid, @Param("stugroid")int stugroid);////    @Query("SELECT ns FROM NewStudent ns")//    List<NewStudent> findNewStudent();////    @Query("SELECT nc FROM NewClass nc where nc.courid = :courid")//    List<NewClass> findNewClassByCourseId(int courid);    @Query("SELECT s FROM StudentClass s where s.cass = 'current class' and s.stugroid = :stugroid and s.removeat='No'")    List<StudentClass> findStudentByStudentGroupId(StudentGroup stugroid);    @Query("SELECT s FROM StudentClass s where s.cass != 'old class' and s.stugroid = :stugroid and s.removeat='No'")    List<StudentClass> findAllStudentByStudentGroupId(StudentGroup stugroid);    @Query("SELECT s FROM StudentClass s where s.stuid = :stuid and s.removeat='No'")    List<StudentClass> findStudentGroupByStudentId(Student stuid);    @Query("SELECT s FROM StudentClass s where s.stuid = :stuid and s.cass='current class' and s.removeat='No'")    List<StudentClass> findCurrentClassByStudentId(Student stuid);    @Query(value = "select * from student_class where stuid = ?1 and stugroid = ?2 and cass='current class'", nativeQuery = true)    StudentClass findCurrentClassByStudentIdAndStugroid(int stuid, int stugroid);    @Query("SELECT ns FROM NewStudent ns where  ns.major = :major and ns.removeat='No'")    List<NewStudent> findNewStudent(String major);    @Query("SELECT nc FROM NewClass nc where nc.courid = :courid and nc.removeat='No'")    List<NewClass> findNewClassByCourseId(int courid);    @Query(value="SELECT min(rt.subjdetailsid) FROM Timetable rt where (rt.subjdate =Date_add(Date(:asd), interval -1 day) OR rt.subjdate =Date(:asd) OR rt.subjdate =Date_add(Date(:asd), interval 1 day)) and rt.stugroid=:stugroid and rt.removeat='No' and rt.subjdetailsid != 1 ",nativeQuery = true)    Integer findCurrentSubjectByStudentGroupId(int stugroid,String asd);    @Query(value="SELECT max(rt.subjdate) FROM timetable rt where rt.subjdetailsid =:subjdetailsid and rt.stugroid=:stugroid and rt.removeat='No' ",nativeQuery = true)    Date findSubjectEndDay(int stugroid, int subjdetailsid);    @Query(value="SELECT min(rt.subjdate) FROM timetable rt where rt.subjdetailsid =:subjdetailsid and rt.stugroid=:stugroid and rt.removeat='No' ",nativeQuery = true)    Date findSubjectStartDay(int stugroid,int subjdetailsid);    @Query(value="SELECT DISTINCT tt.stugroid from render_timetable as tt WHERE tt.courseSD = :courseid and tt.subjdetailsid = :subjdetailsid AND tt.stugroid!=:stugroid and tt.removeat='No'",nativeQuery = true)    List<Integer> findStudentGroupHaveSameNextSubject(int courseid,int subjdetailsid,int stugroid);    @Query(value="SELECT DISTINCT tt.stugroid from render_timetable tt where tt.courseSD = :courseid and tt.removeat='No'",nativeQuery = true)    List<Integer> findAllStudyingStudentGroupId(int courseid);    @Query(value="select ex.subjdetailsid from student st join result rs on rs.stuid = st.stuid join exam ex on ex.examid = rs.examid where  st.stuid = :stuid and ex.bout = 1 and (ex.examtype = 'OBJ' or ex.examtype = 'ASM') and ex.removeat = 'No' and rs.removeat = 'No' and st.removeat = 'No'",nativeQuery = true)    List<Integer> checkIfStudentCompleteSubject(int stuid);    @Query(value="SELECT DISTINCT rt.subjdetailsid FROM Timetable rt join student_class sc on sc.stugroid = rt.stugroid join student st on st.stuid = sc.stuid where  rt.subjdate >= Date(:asd) and st.stuid= :stuid and rt.removeat='No'",nativeQuery = true)    List<Integer> getCurrentLearningSubjectDetailIdByStudentId(String asd , int stuid);    @Query(value="SELECT DISTINCT tt.stugroid from render_timetable as tt WHERE tt.subjdetailsid = :subjdetailsid and tt.removeat='No'",nativeQuery = true)    List<Integer> findStudentGroupHaveAvailableNextSubject(int subjdetailsid);    @Query("SELECT sc from StudentGroup sc WHERE sc.courid = :courid and sc.removeat='No'")    List<StudentGroup> findAllStudentGroupByCourse(Courses courid);    @Query("SELECT s FROM StudentClass s where s.cass = 'current class' and s.stugroid = :stugroid and ( s.regissubj = 0 or s.regissubj >= :subjdetailsid ) and s.removeat='No'")    List<StudentClass> findCurrentStudentByStudentGroupAndSubjectDetail(StudentGroup stugroid,int subjdetailsid);    @Query("SELECT s FROM StudentClass s where s.cass = 'learn again' and s.stugroid = :stugroid and s.regissubj = :subjdetailsid and s.removeat='No'")    List<StudentClass> findLearnAgainStudentByStudentGroupAndSubjectDetail(StudentGroup stugroid,int subjdetailsid);    @Query("Update StudentClass s set s.removeat='Yes' where s.stuid = :stuid ")    List<StudentClass> deleteStudentClassByStudent(Student stuid);}