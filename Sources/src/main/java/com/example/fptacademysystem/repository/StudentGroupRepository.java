package com.example.fptacademysystem.repository;import java.util.Date;import java.util.List;import javax.transaction.Transactional;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.Modifying;import org.springframework.data.jpa.repository.Query;import org.springframework.data.repository.query.Param;import org.springframework.stereotype.Repository;import com.example.fptacademysystem.model.Branch;import com.example.fptacademysystem.model.BranchCampus;import com.example.fptacademysystem.model.Courses;import com.example.fptacademysystem.model.FindStudentgroup;import com.example.fptacademysystem.model.GetBranchCount;import com.example.fptacademysystem.model.Lecturer;import com.example.fptacademysystem.model.RenderStudentgroup;import com.example.fptacademysystem.model.Room;import com.example.fptacademysystem.model.StudentGroup;import com.example.fptacademysystem.model.Subject;@Repositorypublic interface StudentGroupRepository extends JpaRepository<StudentGroup, Integer> {    public static final String GET_STUDENT_GROUP_BY_ID = "SELECT sg FROM StudentGroup sg WHERE sg.removeat='No' AND sg.stugroid=:studentGroupId";    public static final String GET_DATA_BY_STUDENT_GROUP_ID = "SELECT fsg FROM FindStudentgroup fsg WHERE fsg.removeat='No' AND fsg.stugroid=:studentGroupId";    public static final String GET_ALL = "SELECT sg FROM StudentGroup sg WHERE sg.removeat='No'";    public static final String GET_FIRST_CHARACTER_BRANCH_AND_COUNT = "SELECT gbc FROM GetBranchCount gbc where gbc.courid=:courID";    public static final String GET_ALL_BRANCH_CAMPUS = "SELECT bc FROM BranchCampus bc where bc.removeat='No'";    public static final String GET_ALL_BRANCH = "SELECT b FROM Branch b where b.removeat='No' AND b.branchid!=1";    //    public static final String GET_COURSES_BY_BRANCH_ID = "SELECT c FROM Courses c WHERE c.removeat='No' AND c.courid!=1 AND c.branchid=:branchID";    public static final String GET_ALL_ROOM = "SELECT r FROM Room r WHERE r.removeat='No'";    public static final String GET_ALL_LECTURER = "SELECT l FROM Lecturer l WHERE l.removeat='No'";    public static final String GET_ALL_STUDENT_GROUP = "SELECT rsg FROM RenderStudentgroup rsg";    public static final String GET_ALL_SUBJECT = "SELECT s FROM Subject s WHERE s.removeat='No' AND s.subjid!=1";    public static final String GET_ALL_STUDENT_GROUP_BY_SUBJECT = "SELECT rst FROM Subject s, SubjectDetails sd, Timetable tt, RenderStudentgroup rst WHERE s.subjid=sd.subjid AND sd.subjdetailsid=tt.subjdetailsid AND tt.stugroid=rst.stugroid AND s.removeat='No' AND sd.removeat='No' AND tt.removeat='No' AND s.subjid=:subjID GROUP BY rst.stugroid";    public static final String GET_ALL_STUDENT_GROUP_BY_COURSES = "SELECT rsg FROM RenderStudentgroup rsg WHERE rsg.courid=:courID";    public static final String UPDATE_STUDENT_GROUP = "UPDATE StudentGroup sg SET sg.stugronm=:stugronm, sg.openingdate=:openingDate, sg.session=:session, sg.shift=:shift, sg.courid=:courID, sg.branchcamid=:branchcamID WHERE sg.stugroid=:stugroID and sg.removeat='No'";    public static final String DELETE_STUDENT_GROUP = "delete from StudentGroup where stugroid =:stugroID";    public static final String GET_STUDENT_GROUP_BY_ID_IN_TIMETABLE = "SELECT COUNT(tt.timetableid) FROM Timetable tt WHERE tt.removeat='No' AND tt.stugroid=:studentGroupId";    //new    public static final String GET_COURSES_BY_BRANCH = "SELECT c FROM Courses c WHERE c.removeat='No' AND c.courid!=1 AND c.branchid=:branchid";    public static final String GET_SUBJECT_BY_BRANCH = "SELECT s FROM Subject s WHERE s.removeat='No' AND s.subjid!=1 AND s.branchid=:branchid";    @Query(value = GET_STUDENT_GROUP_BY_ID)    StudentGroup getStudentGroupByID(@Param("studentGroupId")int studentGroupId);    @Query(value = GET_DATA_BY_STUDENT_GROUP_ID)    FindStudentgroup getDataByStudentGroupId(@Param("studentGroupId")int studentGroupId);    @Query(value = GET_ALL)    List<StudentGroup> getAll();    @Query(value = GET_FIRST_CHARACTER_BRANCH_AND_COUNT)    GetBranchCount getFirstCharBranAndCount(@Param("courID")int courID);    @Query(value = GET_ALL_BRANCH_CAMPUS)    List<BranchCampus> getAllBranchCampus();    @Query(value = GET_ALL_BRANCH)    List<Branch> getAllBranch();//    @Query(value = GET_COURSES_BY_BRANCH_ID)//    List<Courses> getCoursesByBranchID(@Param("branchID")Branch branchID);    @Query(value = GET_ALL_ROOM)    List<Room> getAllRoom();    @Query(value = GET_ALL_LECTURER)    List<Lecturer> getAllLecturer();    @Query(value = GET_ALL_SUBJECT)    List<Subject> getAllSubject();    @Query(value = GET_ALL_STUDENT_GROUP)    List<RenderStudentgroup> getAllStudentGroup();    @Query(value = GET_ALL_STUDENT_GROUP_BY_COURSES)    List<RenderStudentgroup> getAllStudentGroupByCourses(@Param("courID")int courID);    @Query(value = GET_ALL_STUDENT_GROUP_BY_SUBJECT)    List<RenderStudentgroup> getAllStudentGroupBySubject(@Param("subjID")int subjID);    @Transactional    @Modifying    @Query(value = UPDATE_STUDENT_GROUP)    void updateStudentGroup(@Param("stugronm")String stugronm,@Param("openingDate") Date openingDate, @Param("session") String session,                            @Param("shift") int shift, @Param("courID") Courses courID, @Param("branchcamID") BranchCampus branchcamID, @Param("stugroID") int stugroID);    @Transactional    @Modifying    @Query(value = DELETE_STUDENT_GROUP)    void deleteStudentGroup(@Param("stugroID") int stugroID);    @Query(value = GET_STUDENT_GROUP_BY_ID_IN_TIMETABLE)    int getStudentGroupByIdinTimetable(@Param("studentGroupId")StudentGroup studentGroupId);    @Query("select s from StudentGroup s where s.courid = :id")    List<StudentGroup> findAllByCourid(@Param("id")Courses id);    //new    @Query(value = GET_COURSES_BY_BRANCH)    List<Courses> getCoursesByBranch(@Param("branchid")Branch branchid);    @Query(value = GET_SUBJECT_BY_BRANCH)    List<Subject> getSubjectByBranch(@Param("branchid")int branchid);    public static final String GET_AMOUNT_STUDENT_IN_STUDENT_GROUP_ID = "select COUNT(stuid) from StudentClass sc where sc.removeat ='No' and sc.cass in ('current class','learn again') and sc.stugroid =:studentGroupId";    @Query(value = GET_AMOUNT_STUDENT_IN_STUDENT_GROUP_ID)    int getAmountStudentInStudentGroup(@Param("studentGroupId")StudentGroup studentGroupId);}