package com.example.fptacademysystem.repository;import java.util.Date;import java.util.List;import javax.transaction.Transactional;import com.example.fptacademysystem.model.*;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.Modifying;import org.springframework.data.jpa.repository.Query;import org.springframework.data.repository.query.Param;import org.springframework.stereotype.Repository;@Repositorypublic interface TimetableRepository extends JpaRepository<Timetable, Integer> {    public static final String FIND_BY_CLASS = "SELECT sg.shift, tt FROM Timetable tt, StudentGroup sg WHERE tt.stugroid=sg.stugroid AND tt.removeat='No' AND sg.courid!=1 AND tt.stugroid=:stugroID AND tt.semid=:semID";    public static final String GET_ALL_COURSES = "SELECT c FROM Courses c WHERE c.removeat='No' and c.courid!=1";    public static final String GET_STUDENTGROUP_BY_BRANCH = "SELECT sg FROM StudentGroup sg JOIN BranchCampus bc on (sg.branchcamid=bc.branchcamid) WHERE sg.removeat='No' and bc.removeat='No' and bc.branchid=:branchID";    public static final String GET_STUDENT_GROUP_BY_COURSES = "SELECT sg FROM StudentGroup sg where sg.removeat='No' and (select count(sc.stuid) from StudentClass sc where sc.removeat ='No' and sc.stugroid =sg.stugroid) > 0 and (select case when Max(t.semid) is null then 0 else Max(t.semid) end from Timetable t where t.removeat='No' and t.stugroid=sg.stugroid)<4 AND sg.courid=:courID";    public static final String GET_SEMESTER_BY_STUDENT_GROUP = "SELECT s FROM Semester s WHERE s.removeat='No' AND s.semid!=1 AND SUBSTRING(s.semnm,LENGTH(s.semnm),1) NOT IN (SELECT DISTINCT tt.semid FROM Timetable tt WHERE tt.removeat='No' AND tt.stugroid=:studentgroupID)";    public static final String RENDER_ALL_SUBJECT_IN_SEMESTER_OF_CLASS = "SELECT rt FROM RenderTimetable rt WHERE rt.stugroid=:studentgroupID AND rt.semid=:semID ORDER BY rt.timetableid";    public static final String SEARCH_SEMESTER_BY_STUDENT_GROUP = "SELECT s FROM Semester s WHERE s.removeat='No' AND s.semid!=1 AND SUBSTRING(s.semnm,LENGTH(s.semnm),1) IN (SELECT DISTINCT tt.semid FROM Timetable tt WHERE tt.removeat='No' AND tt.stugroid=:studentgroupID)";    public static final String GET_SUBJECT_BY_BRANCH = "SELECT sb FROM Subject sb WHERE sb.removeat='No' AND sb.subjid!=1 AND sb.branchid=:branchID";    public static final String RENDER_ALL_SUBJECT_OF_FUNCTION_GET_SUBJECT_BY_BRANCH = "SELECT ss FROM SearchSubject ss where ss.subjid=:subjID";    public static final String RENDER_ALL_SUBJECT_BY_DATE = "SELECT ssbd FROM SearchSubjectByDate ssbd WHERE ssbd.subjdate >= :startDate AND ssbd.subjdate <= :endDate order by ssbd.subjdate ASC";    public static final String FIND_TIMETABLE_BY_STUDENT_GROUP_AND_SEM = "SELECT tt FROM Timetable tt where tt.removeat='No' And tt.stugroid=:classID and tt.semid=:semID";    public static final String UPDATE_TIMETABLE = "UPDATE Timetable tt SET tt.subjdate = :subjDate, tt.attenteaid=:attenteaID WHERE tt.timetableid= :timetableID";    public static final String DELETE_TIMETABLE="UPDATE Timetable tt SET tt.removeat = 'Yes' WHERE tt.timetableid=:timetableID";    public static final String GET_MIN_MAX_SEMESTER = "SELECT mm FROM MindateMaxdate mm where mm.stugroid=:studentgroupID";    public static final String GET_ALL_LECTURER = "SELECT l FROM Lecturer l WHERE l.removeat='No'";    public static final String UPDATE_TEACHER_IN_TIMETABLE = "UPDATE Timetable tt SET tt.attenteaid = :teaID WHERE tt.timetableid= :timetableID";    public static final String FIND_LECTURER_BY_ID = "SELECT l FROM Lecturer l WHERE l.removeat='No' AND l.lecturid=:lecturID";    public static final String GET_MIN_MAX_DATE_TO_CHECK = "SELECT SUM(sd.slots) FROM SubjectDetails sd WHERE sd.removeat='No' AND sd.semid!=1 AND sd.courid!=1 AND sd.subjid!=1 AND sd.courid=(SELECT sg.courid FROM StudentGroup sg WHERE sg.removeat='No' AND sg.stugroid=:studentgroupID) AND sd.semid=:semID";    public static final String GET_STUDENT_GROUP_BY_STUDENTGROUPID = "select sg.session from StudentGroup sg where sg.removeat='No' and sg.courid!=1 and sg.stugroid=:stugroID";    public static final String GROUP_BY_SUBJECT_NAME = "select rt from RenderTimetable rt where rt.subjnm!='Day Off' and rt.stugroid=:stugroid and rt.semid=:semid group by rt.subjectname order by rt.timetableid";    public static final String GET_ALL_CAMPUS = "SELECT c FROM Campus c WHERE c.removeat='No'";    public static final String GET_ALL_BRANCH = "SELECT b FROM Branch b WHERE b.removeat='No' AND b.branchid!=1";    public static final String GET_ALL_BRANCH_CAMPUS_BY_BRANCH_ID_AND_CAMPUS_ID = "SELECT bc FROM BranchCampus bc WHERE bc.removeat='No' AND bc.branchid=:branchID AND bc.campusid=:campusID";    public static final String RENDER_DATA_BY_LOCATION_ID = "SELECT sl FROM RenderLocation sl where sl.branchcamid=:branchcampusID";    @Query(value = GET_STUDENT_GROUP_BY_STUDENTGROUPID)    String getStudentGroupByStudentGroupID(@Param("stugroID") int stugroID);    @Query(value = FIND_BY_CLASS)    List<Timetable> searchTimetableByClass(@Param("stugroID") int stugroID, @Param("semID") int semID);    @Query(value = GET_ALL_COURSES)    List<Courses> getAllCourses();    @Query(value = GET_STUDENTGROUP_BY_BRANCH)    List<StudentGroup> getStudentGroupByBranch(@Param("branchID")Branch branchID);    @Query(value = GET_STUDENT_GROUP_BY_COURSES)    List<StudentGroup> getStudentGroupByCourses(@Param("courID") Courses courID);    @Query(value = GET_SEMESTER_BY_STUDENT_GROUP)    List<Semester> getSemesterByStudentGroup(@Param("studentgroupID") StudentGroup studentgroupID);    @Query(value = RENDER_ALL_SUBJECT_IN_SEMESTER_OF_CLASS)    List<RenderTimetable> renderSubInSemOfClass(@Param("studentgroupID") int studentgroupID, @Param("semID") int semID);    @Query(value = SEARCH_SEMESTER_BY_STUDENT_GROUP)    List<Semester> searchSemesterByStudentGroup(@Param("studentgroupID") StudentGroup studentgroupID);    @Query(value = GET_SUBJECT_BY_BRANCH)    List<Subject> getSubjectByBranch(@Param("branchID") int branchID);    @Query(value = RENDER_ALL_SUBJECT_OF_FUNCTION_GET_SUBJECT_BY_BRANCH)    List<SearchSubject> renderSubOfFuncSearchSubByBranch(@Param("subjID") int subjID);    @Query(value = RENDER_ALL_SUBJECT_BY_DATE)    List<SearchSubjectByDate> renderSubByDate(@Param("startDate") Date startDate, @Param("endDate") Date endDate);    @Query(value = FIND_TIMETABLE_BY_STUDENT_GROUP_AND_SEM)    List<Timetable> findTTByClassAndSem(@Param("classID") StudentGroup classID, @Param("semID") int semID);    @Transactional    @Modifying    @Query(value = UPDATE_TIMETABLE)    void updateTimetable(@Param("subjDate") Date subjDate,@Param("attenteaID") int attenteaID, @Param("timetableID") int timetableID);    @Transactional    @Modifying    @Query(value = DELETE_TIMETABLE)    void deleteTimetable(@Param("timetableID")int timetableID);    @Query(value = GET_MIN_MAX_SEMESTER)    List<MindateMaxdate> getMinMaxDateOfSem(@Param("studentgroupID") int studentgroupID);    @Query(value = GET_ALL_LECTURER)    List<Lecturer> getAllLecturer();    @Transactional    @Modifying    @Query(value = UPDATE_TEACHER_IN_TIMETABLE)    void updateTeacherInTimetable(@Param("teaID") int teaID, @Param("timetableID") int timetableID);    @Query(value = FIND_LECTURER_BY_ID)    Lecturer getLecturerById(@Param("lecturID") int lecturID);    @Query(value = GET_MIN_MAX_DATE_TO_CHECK)    int getMinMaxDateToCheck(@Param("studentgroupID") int studentgroupID, @Param("semID") int semID);    @Query(value = GROUP_BY_SUBJECT_NAME)    List<RenderTimetable> getGroupBySubjectName(@Param("stugroid") int stugroid, @Param("semid") int semid);    @Query(value = GET_ALL_CAMPUS)    List<Campus> getALlCampus();    @Query(value = GET_ALL_BRANCH)    List<Branch> getAllBranch();    @Query(value = GET_ALL_BRANCH_CAMPUS_BY_BRANCH_ID_AND_CAMPUS_ID)    List<BranchCampus> getBranchCampusByBranchIdAndCampusId(@Param("branchID")Branch branchID, @Param("campusID")Campus campusID);    @Query(value = RENDER_DATA_BY_LOCATION_ID)    List<RenderLocation> renderDataByBranchCampusId(@Param("branchcampusID")int branchcampusID);    //    Quang    @Query("SELECT tt FROM Timetable tt WHERE tt.removeat = 'No' AND tt.attenteaid = :attenteaid AND tt.stugroid = :stugroid AND tt.semid = :semid AND tt.subjdetailsid = :subjdetailsid")    List<Timetable> findDateAttendance(@Param("attenteaid") int attenteaid, @Param("stugroid") StudentGroup stugroid, @Param("semid") int semid, @Param("subjdetailsid") SubjectDetails subjdetailsid);}