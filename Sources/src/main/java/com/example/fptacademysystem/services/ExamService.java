package com.example.fptacademysystem.services;import com.example.fptacademysystem.dto.*;import com.example.fptacademysystem.model.*;import com.example.fptacademysystem.repository.*;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.logging.Level;import java.util.logging.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class ExamService implements IExam{    @Autowired    ExamRepository repo;    @Autowired    CourseRepository courseRepo;    @Autowired    StudentGroupRepository sgrouprepo;    @Autowired    SemesterRepository semRepo;    @Autowired    SubjectDetailRepository sdetailrepo;    @Autowired    SubjectRepository subrepo;    @Autowired    RoomRepository roomRepo;    @Autowired    StudentClassRepository stuClassRepo;    @Override    public void save(ExamDTO examDTO) {        Date examday = new Date();        SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");        Exam exam = new Exam();        try        {            examday = format1.parse(examDTO.getExamday());        } catch (ParseException ex)        {            Logger.getLogger(ExamService.class.getName()).log(Level.SEVERE, null, ex);        }        if(examDTO.getExamid()!=0){            exam.setExamid(examDTO.getExamid());        }        exam.setExamcodelogin(examDTO.getExamcodelogin());        exam.setExamday(examday);        exam.setExamtype(examDTO.getExamtype());        exam.setExamtime(examDTO.getExamtime());        int bout = Integer.parseInt(examDTO.getBout());        exam.setBout(bout);        // set room id        int roomid = Integer.parseInt(examDTO.getRoomid());        Room room = new Room();        room.setRoomid(roomid);        exam.setRoomid(room);        // set StudentGroup id        int stugroid = Integer.parseInt(examDTO.getStugroid());        StudentGroup studentGroup = new StudentGroup();        studentGroup.setStugroid(stugroid);        exam.setStugroid(studentGroup);        // set subjid        int subjid = Integer.parseInt(examDTO.getSubjdetailsid());        exam.setSubjdetailsid(subjid);        exam.setRemoveat("No");        repo.save(exam);    }    @Override    public List<Exam> findAll() {        return repo.findAll();    }    @Override    public List<Courses> findAllCourse() {        return courseRepo.findAll();    }    @Override    public List<StudentGroup> findStudentGroupByCourid(Courses id) {        return sgrouprepo.findAllByCourid(id);    }    @Override    public List<Semester> findAllSemester() {        return semRepo.findAll();    }    @Override    public List<SubjectDetailsDTO> findSubjectDetails(int semid, int courid) {        List<SubjectDetails> list=new ArrayList<>();        List<SubjectDetailsDTO> sdlist=new ArrayList<>();        list=sdetailrepo.findSubjid(semid, courid);        for (SubjectDetails subjectDetails : list) {            SubjectDetailsDTO sd=new SubjectDetailsDTO();            Subject s=new Subject();            s=subrepo.findById(subjectDetails.getSubjid().getSubjid()).get();            sd.setSubjdetailsid(subjectDetails.getSubjdetailsid());            sd.setSubjnm(s.getSubjnm());            sdlist.add(sd);        }        return sdlist;    }    @Override    public Room findRoomById(int id) {        return roomRepo.findById(id).get();    }    @Override    public StudentGroup findStudentGroupById(int id) {        return sgrouprepo.findById(id).get();    }    @Override    public SubjectDetails findSubjectDetailsById(int id) {        return sdetailrepo.findById(id).get();    }    @Override    public Subject findSubjectById(int id) {        return subrepo.findById(id).get();    }    @Override    public ExamDTO findExamById(int id) {        Exam ex = new Exam();        ex=repo.findById(id).get();        ExamDTO dto = new ExamDTO();        dto.setExamid(ex.getExamid());        dto.setExamcodelogin(ex.getExamcodelogin());        dto.setExamday(ex.getExamday().toString());        dto.setExamtype(ex.getExamtype());        dto.setExamtime(ex.getExamtime());        dto.setBout(ex.getBout()+"");        dto.setRoomid(ex.getRoomid().getRoomid().toString());        dto.setStugroid(ex.getStugroid().getStugroid().toString());        dto.setSubjdetailsid(ex.getSubjdetailsid()+"");        return dto;    }    @Override    public void delete(int id) {        Exam ex = new Exam();        ex=repo.findById(id).get();        ex.setRemoveat("Yes");        repo.save(ex);    }    @Override    public boolean checkIfExamComplete(int examid) {        if(repo.checkCompleteExam(examid) != null){            return true;        }else{            return false;        }    }    @Override    public List<SubjectDetailsDTO> findAvailableSubjectDetailsById(int stugroid,int semid){        long millis = System.currentTimeMillis();        Date currentdate = new Date(millis);        List<SubjectDetailsDTO> sdlist=new ArrayList<>();        List<Integer> listsubjdetailsid=new ArrayList<>();        List<Exam> listExam=new ArrayList<>();        listsubjdetailsid = repo.findCurrentAndCompleteSubject(stugroid,semid,currentdate);        for (int subjdetailsid : listsubjdetailsid) {            int objCount=0;            int asmCount=0;            StudentGroup sg = new StudentGroup();            SubjectDetails sd=new SubjectDetails();            SubjectDetailsDTO sdto=new SubjectDetailsDTO();            Subject s=new Subject();            sg.setStugroid(stugroid);            listExam = repo.findExamByStudentGroupAndSubject(sg ,subjdetailsid);            for(Exam e : listExam) {                if(e.getExamtype().equals("OBJ")){                    objCount++;                }                if(e.getExamtype().equals("ASM")){                    asmCount++;                }            }            if(objCount < 2 || asmCount < 2){                sd=sdetailrepo.findById(subjdetailsid).get();                s=subrepo.findById(sd.getSubjid().getSubjid()).get();                sdto.setSubjdetailsid(sd.getSubjdetailsid());                sdto.setSubjnm(s.getSubjnm());                sdlist.add(sdto);            }        }        return sdlist;    }    @Override    public Integer checkExamBout(int stugroid, int subjdetailsid,String examtype) {        int examtypeCount=0;        StudentGroup sg = new StudentGroup();        List<Exam> listExam=new ArrayList<>();        sg.setStugroid(stugroid);        listExam = repo.findExamByStudentGroupAndSubject(sg ,subjdetailsid);        for(Exam e : listExam) {            if(e.getExamtype().equals(examtype) ){                examtypeCount++;            }        }        return examtypeCount;    }    @Override    public List<Integer> checkExamType(int stugroid, int subjdetailsid) {        int asmCount=0;        int objCount=0;        StudentGroup sg = new StudentGroup();        List<Exam> listExam=new ArrayList<>();        List<Integer> examType=new ArrayList<>();        sg.setStugroid(stugroid);        listExam = repo.findExamByStudentGroupAndSubject(sg ,subjdetailsid);        for(Exam e : listExam) {            if(e.getExamtype().equals( "ASM" )){                asmCount++;            }            if(e.getExamtype().equals( "OBJ" )){                objCount++;            }        }        examType.add(asmCount);        examType.add(objCount);        return examType;    }    @Override    public Date findSubjectEndDay(int stugroid, int subjdetailsid) {        return stuClassRepo.findSubjectEndDay(stugroid, subjdetailsid);    }}