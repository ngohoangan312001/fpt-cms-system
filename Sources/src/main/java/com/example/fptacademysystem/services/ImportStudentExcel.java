/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */package com.example.fptacademysystem.services;import com.example.fptacademysystem.dto.ImportStudentDTO;import com.example.fptacademysystem.model.Parent;import com.example.fptacademysystem.model.ParentAccount;import com.example.fptacademysystem.model.Student;import com.example.fptacademysystem.model.StudentAccount;import com.example.fptacademysystem.repository.StudentRepository;import java.util.List;import java.io.IOException;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Collections;import java.util.Date;import java.util.logging.Level;import java.util.logging.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;/** * * @author ADMIN */@Servicepublic class ImportStudentExcel {    @Autowired    StudentService studentservice;    @Autowired    ReadExcelStudent readexcelservice;    @Autowired    ParentService parentService;    @Autowired    StudentAccountService studentAccountService;    @Autowired    ParentAccountService parentAccountService;    @Autowired    StudentRepository studentRepository;    public List<ImportStudentDTO> importData(MultipartFile file) throws IOException {        List<ImportStudentDTO> list = readexcelservice.showDataExcel(file);        List<ImportStudentDTO> listWithoutNull = new ArrayList<>();        for (ImportStudentDTO dto : list)        {            if (dto.getFullnm() != null && dto.getDob() != null && dto.getGender() != null && dto.getIdcard() != null && dto.getMobilephone().toString() != null && dto.getEmail() != null && dto.getAddress() != null && dto.getParentname() != null && dto.getParentphone().toString() != null && dto.getParentemail() != null && dto.getParentaddress() != null)            {                listWithoutNull.add(dto);            }        }        for (ImportStudentDTO importStudentDTO : listWithoutNull)        {            System.out.println(importStudentDTO);        }        createStudent(listWithoutNull);        return listWithoutNull;    }    private void createStudent(List<ImportStudentDTO> list) {        if (getListStudent().isEmpty())        {            for (int i = 0; i < list.size(); i++)            {                try                {                    String phone = "0" + list.get(i).getMobilephone().toString();                    //create Student                    Student s = new Student();                    Integer id = 1;                    if (studentRepository.findNewStudentId() != null)                    {                        id = studentRepository.findNewStudentId() + 1;                    }                    String rollnum = "Student" + id;                    s.setRollnum(rollnum);                    s.setFullnm(list.get(i).getFullnm());                    Date dob = new SimpleDateFormat("yyyy-MM-dd").parse(list.get(i).getDob());                    s.setDob(dob);                    s.setGender(list.get(i).getGender());                    s.setIdcard(list.get(i).getIdcard());                    if (list.get(i).getDoi() != null)                    {                        Date doi = new SimpleDateFormat("yyyy-MM-dd").parse(list.get(i).getDoi());                        s.setDoi(doi);                    }                    if (list.get(i).getPoi() != null)                    {                        s.setPoi(list.get(i).getPoi());                    }                    s.setMobphone(phone);                    s.setEmail(list.get(i).getEmail());                    if (list.get(i).getCollegeemail() != null)                    {                        s.setCollegeemail(list.get(i).getCollegeemail());                    }                    s.setImg("default_user.png");                    s.setMajor("No Major");                    s.setStustatus("studying");                    s.setAddress(list.get(i).getAddress());                    s.setRemoveat("No");                    studentservice.createStudent(s);                    //create Student Account                    StudentAccount studentAccount = new StudentAccount();                    studentAccount.setRollnum(rollnum);                    studentAccount.setPass("123");                    int newstudentid = studentservice.findNewStudent();                    Student student = new Student(newstudentid);                    studentAccount.setStuid(student);                    studentAccount.setRemoveat("No");                    studentAccountService.SaveStudentAccount(studentAccount);                    //create Parent                    createParent(list.get(i), rollnum, newstudentid);                } catch (ParseException ex)                {                    Logger.getLogger(ImportStudentExcel.class.getName()).log(Level.SEVERE, null, ex);                }            }        } else        {            List<Student> listStudent = getListStudent();            for (int i = 0; i < list.size(); i++)            {                boolean checkExist = false;                String phone = "0" + list.get(i).getMobilephone().toString();                for (int j = 0; j < listStudent.size(); j++)                {                    if (list.get(i).getIdcard().equals(listStudent.get(j).getIdcard()) || phone.equals(listStudent.get(j).getMobphone()) || list.get(i).getEmail().equals(listStudent.get(j).getEmail()) || list.get(i).getCollegeemail().equals(listStudent.get(j).getCollegeemail()))                    {                        checkExist = true;                    }                }                if (checkExist == false)                {                    try                    {                        //create Student                        Student s = new Student();                        Integer id = studentRepository.findNewStudentId() + 1;                        String rollnum = "Student" + id;                        s.setRollnum(rollnum);                        s.setFullnm(list.get(i).getFullnm());                        Date dob = new SimpleDateFormat("yyyy-MM-dd").parse(list.get(i).getDob());                        s.setDob(dob);                        s.setGender(list.get(i).getGender());                        s.setIdcard(list.get(i).getIdcard());                        if (list.get(i).getDoi() != null)                        {                            Date doi = new SimpleDateFormat("yyyy-MM-dd").parse(list.get(i).getDoi());                            s.setDoi(doi);                        }                        if (list.get(i).getPoi() != null)                        {                            s.setPoi(list.get(i).getPoi());                        }                        s.setMobphone(phone);                        s.setEmail(list.get(i).getEmail());                        if (list.get(i).getCollegeemail() != null)                        {                            s.setCollegeemail(list.get(i).getCollegeemail());                        }                        s.setImg("default_user.png");                        s.setMajor("No Major");                        s.setStustatus("studying");                        s.setAddress(list.get(i).getAddress());                        s.setRemoveat("No");                        studentservice.createStudent(s);                        //create Student Account                        StudentAccount studentAccount = new StudentAccount();                        studentAccount.setRollnum(rollnum);                        studentAccount.setPass("123");                        int newstudentid = studentservice.findNewStudent();                        Student student = new Student(newstudentid);                        studentAccount.setStuid(student);                        studentAccount.setRemoveat("No");                        studentAccountService.SaveStudentAccount(studentAccount);                        //create Parent                        createParent(list.get(i), rollnum, newstudentid);                    } catch (ParseException ex)                    {                        Logger.getLogger(ImportStudentExcel.class.getName()).log(Level.SEVERE, null, ex);                    }                }            }        }    }    private List<Student> getListStudent() {        List<Student> list = studentservice.findAll();        List<Student> listNew = new ArrayList<>();        if (list.isEmpty())        {            return Collections.emptyList();        } else        {            for (Student student : list)            {                if (student.getRemoveat().equals("No"))                {                    listNew.add(student);                }            }        }        return listNew;    }    private void createParent(ImportStudentDTO dto, String rollnum, int id) {        Parent parent = new Parent();        parent.setRollnum(rollnum);        parent.setParnm(dto.getParentname());        String phone = "0" + dto.getParentphone().toString();        parent.setParphone(phone);        if (dto.getParentjob() != null)        {            parent.setParjob(dto.getParentjob());        }        if (dto.getParentpoi() != null)        {            parent.setPow(dto.getParentpoi());        }        parent.setParemail(dto.getParentemail());        parent.setAddress(dto.getParentaddress());        Student s = new Student(id);        parent.setStuid(s);        parent.setRemoveat("No");        parentService.createParent(parent);        //create Parent Account        ParentAccount parentAccount = new ParentAccount();        parentAccount.setRollnum(rollnum);        parentAccount.setPass("123");        int parentid = parentService.findNewParent();        Parent p = new Parent(parentid);        parentAccount.setParid(p);        parentAccount.setRemoveat("No");        parentAccountService.SaveParentAccount(parentAccount);    }}