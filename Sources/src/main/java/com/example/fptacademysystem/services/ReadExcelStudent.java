/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */package com.example.fptacademysystem.services;import com.example.fptacademysystem.dto.ImportStudentDTO;import com.example.fptacademysystem.dto.StudentDTO;import java.io.IOException;import java.io.InputStream;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.apache.poi.ss.usermodel.Cell;import org.apache.poi.ss.usermodel.CellType;import org.apache.poi.ss.usermodel.DateUtil;import org.apache.poi.ss.usermodel.FormulaEvaluator;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.ss.usermodel.Sheet;import org.apache.poi.ss.usermodel.Workbook;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;/** * * @author ADMIN */@Servicepublic class ReadExcelStudent {    public static final int COLUMN_INDEX_FULLNAME = 1;    public static final int COLUMN_INDEX_DOB = 2;    public static final int COLUMN_INDEX_GENDER = 3;    public static final int COLUMN_INDEX_IDCARD = 4;    public static final int COLUMN_INDEX_DOI = 5;    public static final int COLUMN_INDEX_POI = 6;    public static final int COLUMN_INDEX_MOBILEPHONE = 7;    public static final int COLUMN_INDEX_EMAIL = 8;    public static final int COLUMN_INDEX_COLLEGEEMAIL = 9;    public static final int COLUMN_INDEX_ADDRESS = 10;    public static final int COLUMN_INDEX_PNAME = 11;    public static final int COLUMN_INDEX_PPHONE = 12;    public static final int COLUMN_INDEX_PJOB = 13;    public static final int COLUMN_INDEX_PPOI = 14;    public static final int COLUMN_INDEX_PEMAIL = 15;    public static final int COLUMN_INDEX_PADDRESS = 16;    public List<ImportStudentDTO> showDataExcel(MultipartFile filePath) throws IOException {        //final String excelFilePath = filePath;        final List<ImportStudentDTO> books = readExcel(filePath);        return books;    }    public static List<ImportStudentDTO> readExcel(MultipartFile excelFilePath) throws IOException {        List<ImportStudentDTO> listS = new ArrayList<>();        // Get file        //InputStream inputStream = new FileInputStream(new File(ex));        // Get workbook        Workbook workbook = getWorkbook(excelFilePath.getInputStream(), excelFilePath.getOriginalFilename());        // Get sheet        Sheet sheet = workbook.getSheetAt(0);        // Get all rows        Iterator<Row> iterator = sheet.iterator();        while (iterator.hasNext())        {            Row nextRow = iterator.next();            if (nextRow.getRowNum() == 0)            {                // Ignore header                continue;            }            // Get all cells            Iterator<Cell> cellIterator = nextRow.cellIterator();            // Read cells and set value for book object            ImportStudentDTO s = new ImportStudentDTO();            while (cellIterator.hasNext())            {                //Read cell                Cell cell = cellIterator.next();                Object cellValue = getCellValue(cell);                if (cellValue == null || cellValue.toString().isEmpty())                {                    continue;                }                // Set value for book object                int columnIndex = cell.getColumnIndex();                switch (columnIndex)                {                    case COLUMN_INDEX_FULLNAME:                        s.setFullnm((String) getCellValue(cell));                        break;                    case COLUMN_INDEX_DOB:                        s.setDob((String) getCellValue(cell));                        break;                    case COLUMN_INDEX_GENDER:                        s.setGender((String) getCellValue(cell));                        break;                    case COLUMN_INDEX_IDCARD:                        s.setIdcard((String) getCellValue(cell));                        break;                    case COLUMN_INDEX_DOI:                        s.setDoi((String) getCellValue(cell));                        break;                    case COLUMN_INDEX_POI:                        s.setPoi((String) getCellValue(cell));                        break;                    case COLUMN_INDEX_MOBILEPHONE:                        s.setMobilephone(new BigDecimal((double) cellValue).intValue());                        break;                    case COLUMN_INDEX_EMAIL:                        s.setEmail((String) getCellValue(cell));                        break;                    case COLUMN_INDEX_COLLEGEEMAIL:                        s.setCollegeemail((String) getCellValue(cell));                        break;                    case COLUMN_INDEX_ADDRESS:                        s.setAddress((String) getCellValue(cell));                        break;                    case COLUMN_INDEX_PNAME:                        s.setParentname((String) getCellValue(cell));                        break;                    case COLUMN_INDEX_PPHONE:                        s.setParentphone(new BigDecimal((double) cellValue).intValue());                        break;                    case COLUMN_INDEX_PJOB:                        s.setParentjob((String) getCellValue(cell));                        break;                    case COLUMN_INDEX_PPOI:                        s.setParentpoi((String) getCellValue(cell));                        break;                    case COLUMN_INDEX_PEMAIL:                        s.setParentemail((String) getCellValue(cell));                        break;                    case COLUMN_INDEX_PADDRESS:                        s.setParentaddress((String) getCellValue(cell));                        break;                    default:                        break;                }            }            listS.add(s);        }        workbook.close();        return listS;    }    // Get Workbook    private static Workbook getWorkbook(InputStream inputStream, String excelFilePath) throws IOException {        Workbook workbook = null;        if (excelFilePath.endsWith("xlsx"))        {            workbook = new XSSFWorkbook(inputStream);        } else if (excelFilePath.endsWith("xls"))        {            workbook = new HSSFWorkbook(inputStream);        } else        {            throw new IllegalArgumentException("The specified file is not Excel file");        }        return workbook;    }    // Get cell value    private static Object getCellValue(Cell cell) {        CellType cellType = cell.getCellTypeEnum();        Object cellValue = null;        switch (cellType)        {            case BOOLEAN:                cellValue = cell.getBooleanCellValue();                break;            case FORMULA:                Workbook workbook = cell.getSheet().getWorkbook();                FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();                cellValue = evaluator.evaluate(cell).getNumberValue();                break;            case NUMERIC:                if(DateUtil.isCellDateFormatted(cell)){                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");                    cellValue = dateFormat.format(cell.getDateCellValue());                }else{                    cellValue = cell.getNumericCellValue();                }                break;            case STRING:                cellValue = cell.getStringCellValue();                break;            case _NONE:            case BLANK:            case ERROR:                break;            default:                break;        }        return cellValue;    }}