package com.example.fptacademysystem.services;import java.util.ArrayList;import java.util.List;import com.example.fptacademysystem.dto.ResultDTO;import com.example.fptacademysystem.dto.SubjectDetailsDTO;import com.example.fptacademysystem.model.Courses;import com.example.fptacademysystem.model.Exam;import com.example.fptacademysystem.model.Result;import com.example.fptacademysystem.model.Semester;import com.example.fptacademysystem.model.Student;import com.example.fptacademysystem.model.StudentClass;import com.example.fptacademysystem.model.StudentGroup;import com.example.fptacademysystem.model.Subject;import com.example.fptacademysystem.model.SubjectDetails;import com.example.fptacademysystem.repository.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class ResultService implements IResult {    @Autowired    ResultRepository repo;    @Autowired    CourseRepository courseRepo;    @Autowired    StudentGroupRepository sgrouprepo;    @Autowired    SemesterRepository semRepo;    @Autowired    SubjectDetailRepository sdetailrepo;    @Autowired    SubjectRepository subrepo;    @Autowired    StudentRepository studRepo;    @Autowired    StudentClassRepository studClassRepo;    @Autowired    ExamRepository examRepo;    @Override    public void create(ResultDTO resultdt) {        if (resultdt.getExamasmid()!=0 && resultdt.getAsmResultId()!=0) {            Result resultasm = new Result();            Student studentasm = new Student();            Exam examasm = new Exam();            resultasm.setResultid(resultdt.getAsmResultId());            resultasm.setExamresults(resultdt.getAsmresult());            studentasm.setStuid(resultdt.getStuid());            resultasm.setStuid(studentasm);            examasm.setExamid(resultdt.getExamasmid());            resultasm.setExamid(examasm);            resultasm.setRemoveat("No");            repo.save(resultasm);        }else if(resultdt.getExamasmid()!=0){            Result resultasm = new Result();            Student studentasm = new Student();            Exam examasm = new Exam();            resultasm.setExamresults(resultdt.getAsmresult());            studentasm.setStuid(resultdt.getStuid());            resultasm.setStuid(studentasm);            examasm.setExamid(resultdt.getExamasmid());            resultasm.setExamid(examasm);            resultasm.setRemoveat("No");            repo.save(resultasm);        }        if (resultdt.getExamobjid() != 0 && resultdt.getObjResultId()!=0) {            Result resultobj = new Result();            Student studentobj = new Student();            Exam examobj = new Exam();            resultobj.setResultid(resultdt.getObjResultId());            resultobj.setExamresults(resultdt.getObjresult());            studentobj.setStuid(resultdt.getStuid());            resultobj.setStuid(studentobj);            examobj.setExamid(resultdt.getExamobjid());            resultobj.setExamid(examobj);            resultobj.setRemoveat("No");            repo.save(resultobj);        }else if (resultdt.getExamobjid() != 0) {            Result resultobj = new Result();            Student studentobj = new Student();            Exam examobj = new Exam();            resultobj.setExamresults(resultdt.getObjresult());            studentobj.setStuid(resultdt.getStuid());            resultobj.setStuid(studentobj);            examobj.setExamid(resultdt.getExamobjid());            resultobj.setExamid(examobj);            resultobj.setRemoveat("No");            repo.save(resultobj);        }    }    @Override    public List<Result> findAll() {        return repo.findAll();    }    @Override    public List<StudentClass> findStudentByStudentGroupAndSubjectDetail(StudentGroup studentGroup, int subjdetailsid) {        List<StudentClass> listCurrent = studClassRepo.findCurrentStudentByStudentGroupAndSubjectDetail(studentGroup,subjdetailsid);        List<StudentClass> listLearnAgain = studClassRepo.findLearnAgainStudentByStudentGroupAndSubjectDetail(studentGroup,subjdetailsid);        for (StudentClass student : listLearnAgain){            listCurrent.add(student);        }        return listCurrent;    }    @Override    public Subject findSubjectById(int id) {        return subrepo.findById(id).get();    }    @Override    public List<Courses> findAllCourse() {        return courseRepo.findAll();    }    @Override    public List<StudentGroup> findStudentGroupByCourid(Courses id) {        return sgrouprepo.findAllByCourid(id);    }    @Override    public List<Semester> findAllSemester() {        return semRepo.findAll();    }    @Override    public List<SubjectDetailsDTO> findSubjectDetails(int semid, int stugroid) {        List<Integer> listexamid = new ArrayList<>();        List<Integer> list = new ArrayList<>();        // List<SubjectDetails> list = new ArrayList<>();        List<SubjectDetailsDTO> sdlist = new ArrayList<>();        StudentGroup sg = new StudentGroup();        Semester sem = new Semester();        sg.setStugroid(stugroid);        sem.setSemid(semid);        listexamid = repo.findExamByStudentGroupAndSemId(sg,sem);        // list = sdetailrepo.findSubjid(semid, courid);        int count = 0;        for(Integer examid : listexamid) {            Exam ex = new Exam();            ex = examRepo.findById(examid).get();            if(ex.getBout() == (count + 1)){                list.add(examid);                count++;            }        }        for (Integer id : list) {            Exam ex = new Exam();            SubjectDetails subjectDetails = new SubjectDetails();            SubjectDetailsDTO sd = new SubjectDetailsDTO();            Subject s = new Subject();            ex = examRepo.findById(id).get();            subjectDetails = sdetailrepo.findById(ex.getSubjdetailsid()).get();            s = subrepo.findById(subjectDetails.getSubjid().getSubjid()).get();            sd.setSubjdetailsid(subjectDetails.getSubjdetailsid());            sd.setSubjnm("( BOUT:"+ ex.getBout() +" ) "+s.getSubjnm());            sd.setExamType(ex.getExamtype());            sd.setBout(ex.getBout());            sdlist.add(sd);        }        return sdlist;    }    @Override    public Student findStudentByStudentId(int studentId) {        return studRepo.findById(studentId).get();    }    @Override    public List<Exam> findExamBySubjectDetailAndStudentGroup(StudentGroup studentGroup, int subjectDetails) {        return examRepo.findExamByStudentGroupAndSubject(studentGroup, subjectDetails);    }    @Override    public Result findResultByStudentIdAndExamid(int stuid,int examId) {        Student student = new Student();        student.setStuid(stuid);        Exam exam = new Exam();        exam.setExamid(examId);        return repo.findExamByStudentIdAndExamId(student,exam);    }    @Override    public Integer getStudentAttendance(int stuid, int subjectDetails) {        Integer count = 0;        for(Integer id : repo.getStudentAttendance( stuid,  subjectDetails)){            count++;        }        return count;    }    @Override    public Integer getAllSubjectCount(int studentGroup, int subjectDetails) {        Integer count = 0;        for(Integer id : repo.getAllSubjectCount( studentGroup,  subjectDetails)){            count++;        }        return count;    }}