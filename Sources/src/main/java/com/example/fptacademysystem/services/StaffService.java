package com.example.fptacademysystem.services;import com.example.fptacademysystem.dto.StaffDTO;import com.example.fptacademysystem.model.Department;import com.example.fptacademysystem.model.Role;import com.example.fptacademysystem.model.Staff;import com.example.fptacademysystem.repository.StaffRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.util.StringUtils;import java.text.ParseException;import org.springframework.web.multipart.MultipartFile;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import java.util.logging.Level;import java.util.logging.Logger;@Servicepublic class StaffService implements IStaff {    @Autowired    StaffRepository staffRepo;    @Override    public List<Staff> findAll() {        return staffRepo.findAllStaff();    }    @Override    public void postCreate(StaffDTO dto) {        // tao lecturer        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");        Date dob = new Date();        Date doi = new Date();        //save file on the system        MultipartFile file = dto.getImg();        String img = StringUtils.cleanPath(file.getOriginalFilename());        try        {            dob = format.parse(dto.getDob());            doi = format.parse(dto.getDoi());        } catch (ParseException ex)        {            Logger.getLogger(LecturerService.class.getName()).log(Level.SEVERE, null, ex);        }        Staff staff = new Staff();        staff.setRollnum(dto.getRollnum());        staff.setFullnm(dto.getFullnm());        staff.setDob(dob);        staff.setIdcard(dto.getIdcard());        staff.setGender(dto.getGender());        staff.setEmail(dto.getEmail());        staff.setCompanyemail(dto.getCompanyemail());        staff.setPoi(dto.getPoi());        staff.setDoi(doi);        staff.setPhone(dto.getPhone());        staff.setImg(img);        staff.setContract(dto.getContract());        staff.setAddress(dto.getAddress());        staff.setRemoveat("No");        //set depid        Department depid = new Department();        depid.setDepid(Integer.parseInt(dto.getDepid()));        staff.setDepid(depid);        //set roleid        Role roleid = new Role();        roleid.setRoleid(Integer.parseInt(dto.getRoleid()));        staff.setRoleid(roleid);        staffRepo.save(staff);    }    @Override    public Staff findStaffByStaffid(int staffid) {        return staffRepo.findByStaffid(staffid);    }    @Override    public void postEdit(StaffDTO dto) {        Staff existStaff = staffRepo.findByStaffid(Integer.parseInt(dto.getStaffid()));        // tao staff        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");        Date dob = new Date();        Date doi = new Date();        //save file on the system        MultipartFile file = dto.getImg();        String img = "";        if(file.getOriginalFilename().isEmpty()){            img = existStaff.getImg();        }else{            img = StringUtils.cleanPath(file.getOriginalFilename());        }        try        {            dob = format.parse(dto.getDob());            doi = format.parse(dto.getDoi());        } catch (ParseException ex)        {            Logger.getLogger(LecturerService.class.getName()).log(Level.SEVERE, null, ex);        }        Staff staff = new Staff();        staff.setStaffid(Integer.parseInt(dto.getStaffid()));        staff.setRollnum(existStaff.getRollnum());        staff.setFullnm(dto.getFullnm());        staff.setDob(dob);        staff.setIdcard(dto.getIdcard());        staff.setGender(dto.getGender());        staff.setEmail(dto.getEmail());        staff.setCompanyemail(dto.getCompanyemail());        staff.setPoi(dto.getPoi());        staff.setDoi(doi);        staff.setPhone(dto.getPhone());        staff.setImg(img);        staff.setContract(dto.getContract());        staff.setAddress(dto.getAddress());        staff.setRemoveat("No");        //set depid        Department depid = new Department();        depid.setDepid(Integer.parseInt(dto.getDepid()));        staff.setDepid(depid);        //set roleid        Role roleid = new Role();        roleid.setRoleid(Integer.parseInt(dto.getRoleid()));        staff.setRoleid(roleid);        staffRepo.save(staff);    }    @Override    public void updateStaffRollnum(String rollnum, int staffid) {        staffRepo.updateStaffRollnum(rollnum, staffid);    }    @Override    public Staff findNewStaff() {        return staffRepo.findNewStaff();    }    @Override    public void deleteStaff(int staffid) {        staffRepo.deleteStaff(staffid);    }}