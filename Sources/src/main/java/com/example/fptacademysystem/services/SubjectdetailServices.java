package com.example.fptacademysystem.services;import java.util.ArrayList;import java.util.List;import com.example.fptacademysystem.dto.SubjectDetailsDTO;import com.example.fptacademysystem.model.Branch;import com.example.fptacademysystem.model.Courses;import com.example.fptacademysystem.model.Semester;import com.example.fptacademysystem.model.Subject;import com.example.fptacademysystem.model.SubjectDetails;import com.example.fptacademysystem.repository.SemesterRepository;import com.example.fptacademysystem.repository.SubjectDetailRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;/** * * @author kille */@Servicepublic class SubjectdetailServices implements ISubjectdetails {    // SubjectDetail repo    @Autowired    SubjectDetailRepository subjectDetailRepository;    // Semester repo    @Autowired    SemesterRepository semesterRepository;    // Course services    @Autowired    CoursesService coursesService;    // Subject services    @Autowired    SubjectService subjectService;    // Branch services    @Autowired    BranchService branchService;    @Override    public List<SubjectDetailsDTO> findAll() {        List<SubjectDetails> list = subjectDetailRepository.findAll();        List<SubjectDetailsDTO> render = new ArrayList<>();        // for each object        for (SubjectDetails sd : list) {            // declare an new object            SubjectDetailsDTO sddto = new SubjectDetailsDTO();            // -----            sddto.setSubjdetailsid(sd.getSubjdetailsid());            sddto.setSlots(sd.getSlots());            sddto.setFee(sd.getFee());            // Get course Name            sddto.setCourid(sd.getCourid().getCourid());            Courses c = coursesService.FindOne(sd.getCourid().getCourid());            sddto.setCournm(c.getCournm());            // Get semester id            sddto.setSemid(sd.getSemid().getSemid());            Semester se = semesterRepository.findById(sd.getSemid().getSemid()).get();            sddto.setSemnm(se.getSemnm());            // get subject id            sddto.setSubjid(sd.getSubjid().getSubjid());            Subject s = subjectService.FindOne(sd.getSubjid().getSubjid());            sddto.setShortnm(s.getShortnm());            sddto.setSubjnm(s.getSubjnm());            // get branch id            sddto.setBranchid(c.getBranchid().getBranchid());            Branch b = branchService.findOne(c.getBranchid().getBranchid());            sddto.setBranchnm(b.getBranchnm());            // add to render            render.add(sddto);        }        return render;    }    // find newest course for create subject-details    @Override    public int findnewCourses() {        return subjectDetailRepository.findnewCourses();    }    // find all subject by branch id    @Override    public List<Subject> findSubjectBranchid(int branchid) {        return subjectDetailRepository.findSubjectbybranchid(branchid);    }    // Create subject-details and courses    @Override    public void create(List<SubjectDetailsDTO> sddto) {        // create subject-details        Courses c = coursesService.FindOne(subjectDetailRepository.findnewCourses());        for (SubjectDetailsDTO sdd : sddto) {            SubjectDetails sd = new SubjectDetails();            Subject s = new Subject();            Semester se = new Semester();            sd.setSlots(sdd.getSlots());            sd.setFee(sdd.getFee());            s.setSubjid(sdd.getSubjid());            sd.setSubjid(s);            se.setSemid(sdd.getSemid());            sd.setSemid(se);            sd.setCourid(c);            sd.setRemoveat("No");            subjectDetailRepository.save(sd);        }    }    @Override    public List<SubjectDetailsDTO> findSubjid(int semid, int courid) {        Semester se= semesterRepository.findById(semid).get();        Courses c= coursesService.FindOne(courid);        List<SubjectDetails>listAll=subjectDetailRepository.findSubjid(semid, courid);        List<SubjectDetailsDTO>render=new ArrayList<>();        for (SubjectDetails sd : listAll) {            // declare an new object            SubjectDetailsDTO sddto = new SubjectDetailsDTO();            // -----            sddto.setSubjdetailsid(sd.getSubjdetailsid());            sddto.setSlots(sd.getSlots());            sddto.setFee(sd.getFee());            // Get course Name            sddto.setCourid(courid);            sddto.setCournm(c.getCournm());            // Get semester id            sddto.setSemid(semid);            sddto.setSemnm(se.getSemnm());            // get subject id            sddto.setSubjid(sd.getSubjid().getSubjid());            Subject s = subjectService.FindOne(sd.getSubjid().getSubjid());            sddto.setShortnm(s.getShortnm());            sddto.setSubjnm(s.getSubjnm());            // get branch id            sddto.setBranchid(c.getBranchid().getBranchid());            Branch b = branchService.findOne(c.getBranchid().getBranchid());            sddto.setBranchnm(b.getBranchnm());            // add to render            render.add(sddto);        }        return render;    }}