const showError = (input, message) => {    const formField = input.parentElement;    input.classList.remove('is-valid');    input.classList.add('is-invalid');    input.focus();    formField.classList.remove('success');    formField.classList.add('error');    // show message error with wrong input    const error = formField.querySelector('span');    error.textContent = message;};const showSuccess = (input) => {    const formField = input.parentElement;    input.classList.remove('is-invalid');    input.classList.add('is-valid');    formField.classList.remove('error');    formField.classList.add('success');    // hide message error    const error = formField.querySelector('span');    error.textContent = ''; // gán rỗng để ẩn message lỗi};//Check not nullconst check_input = (value) => {    if (value == '') {        return false;    } else {        return true;    }}const stringonly = /^(([a-zA-Z]+[ ]{1}|[a-zA-Z]+|[])+)$/;//get object from input form create + update departmentconst create_branchname = document.querySelector('#create_BranchName');const edit_branchname = document.querySelector('#edit_BranchName');// CRUD depart formconst formbranch = document.querySelector('#newbranch');const editbranchbtn = document.querySelector('#editbranchbtn');const formbranchedit = document.querySelector('#updateBranch');//------check field in form new department-----------//check_name departmentconst check_create_branchname = () => {    var rs = false;    const branchname = create_branchname.value;    if (check_input(branchname) == false) {        showError(create_branchname, "Branch name can not blank");    } else if (!(stringonly.test(branchname))) {        showError(create_branchname, "Branch name is invalid");    } else {        showSuccess(create_branchname);        rs = true;    }    return rs;}//--- check field in form edit -----const check_edit_branchname = () => {    var rs = false;    const branchname = edit_branchname.value;    if (check_input(branchname) == false) {        showError(edit_branchname, "Branch name can not blank");    } else if (!(stringonly.test(branchname))) {        showError(edit_branchname, "Branch name is invalid");    } else {        showSuccess(edit_branchname);        rs = true;    }    return rs;}formbranch.addEventListener('input', function(e) {    switch (e.target.id) {        //check department name        case ('create_BranchName'):            check_create_branchname();            break;    }});// Create new branchformbranch.addEventListener('submit', function(e) {    e.preventDefault();    let is_branchvalid = check_create_branchname();    let check_valid = is_branchvalid;    if (check_valid == true) {        var formdata = {            branchnm: create_branchname.value,            removeat: 'No',        }        $.ajax({            url: "/api/admin/branch/branchCreate",            type: 'POST',            data: JSON.stringify(formdata),            cache: false,            contentType: 'application/json; charset=UTF-8',            processData: false,            success: function() {                Swal.fire({                    position: 'center',                    icon: 'success',                    title: 'Your work has been saved',                    showConfirmButton: false,                    timer: 1500                });                setTimeout("location.reload(true);", 2000);            },            error: function() {                Swal.fire({                    position: 'center',                    icon: 'success',                    title: 'Your work has been saved',                    showConfirmButton: false,                    timer: 1500                });                setTimeout("location.reload(true);", 2000);            }        });    }});// Edit departmentfunction doUpdateBranch(elem) {    var branchid = elem.querySelector('input').value;    $.ajax({        type: 'get',        url: '/api/admin/branch/BranchFind/' + branchid,        success: function(result) {            $('#updateBranch #edit_id').val(result.branchid);            $('#updateBranch #edit_BranchName').val(result.branchnm);        },        error: function() {            $(document).ajaxError(function(event, xhr, options, exc) {                alert(event);                alert(xhr.statusText);                alert(options.url);                alert(exc);            })        }    });}formbranchedit.addEventListener('input', function(e) {    switch (e.target.id) {        //check department name        case ('edit_BranchName'):            check_edit_branchname();            break;    }});formbranchedit.addEventListener('submit', function(e) {    e.preventDefault();    const editid = document.querySelector('#edit_id');    var formdata = {        branchid: editid.value,        branchnm: edit_branchname.value,        removeat: 'No',    }    $.ajax({        url: '/api/admin/branch/BranchEdit',        type: 'PUT',        data: JSON.stringify(formdata),        cache: false,        contentType: 'application/json; charset=UTF-8',        processData: false,        success: function() {            Swal.fire({                position: 'center',                icon: 'success',                title: 'Your work has been saved',                showConfirmButton: false,                timer: 1000            });            setTimeout("location.reload(true);", 1000);        },        error: function() {            Swal.fire({                position: 'center',                icon: 'success',                title: 'Your work has been saved',                showConfirmButton: false,                timer: 1500            });            setTimeout("location.reload(true);", 2000);        }    });});// delete departmentfunction deletebranch(elem) {    var branchid = elem.querySelector('input').value;    Swal.fire({        title: 'Do you want to delete ?',        showDenyButton: true,        showCancelButton: false,        confirmButtonText: `Yes`,        denyButtonText: `No`,    }).then((result) => {        /* Read more about isConfirmed, isDenied below */        if (result.isConfirmed) {            $.ajax({                type: 'PUT',                url: '/api/admin/branch/BranchDelete/' + branchid,                success: function() {                    Swal.fire('Deleted!', '', 'success');                    setTimeout("location.reload(true);", 1000);                },                error: function() {                    $(document).ajaxError(function(event, xhr, options, exc) {                        alert(event);                        alert(xhr.statusText);                        alert(options.url);                        alert(exc.reponseText);                    })                }            })        } else if (result.isDenied) {            Swal.fire('Nothing have been deleted', '', 'info');        }    });}