// -------------------------------------------------------Variable Definition In Timetablevar listMinMaxDate = [];var arrayStudentGroup = [];var minMaxDate = [];var countGroupBySubjectName = 0;const formCreateTimetable = document.querySelector('#createTimetableForm');const formUpdateTimetable = document.querySelector('#updateTimetableForm');const formUpdateTeacherTimetable = document.querySelector('#updateTeacherForm');// Create Timetableconst StartDate = document.querySelector('#startDate');const Courses = document.querySelector('#Courses');const StudentGroup = document.querySelector('#stugroid');const Semester = document.querySelector('#Semester');const createLecturer = document.querySelector('#LecturerC');// update Timetableconst updateStartDate = document.querySelector('#StartDateUpdateTT');const updateLecturer = document.querySelector('#LecturerUpdateTT');const updateStudentGroup = document.querySelector('#StudentGroupUpdateTT');const updateSemester = document.querySelector('#SemesterUpdateTT');// Update Teacherconst TeacherUT = document.querySelector('#TeacherUT');// Search Timetableconst formSearchTimetable = document.querySelector('#searchTimetableForm');$(document).ready(function () {    getAllCourses();                //Show all course    getAllBranchS();                //Function search - get all branch    getAllLecturerC();    getAllLecturerUFunc();    getAllLecturerUTeacherFunc();    //---------------------Call Function In Search Function    // Search Student Group    getAllBranchSStudentGroup();    //Search By Location    getAllBranchSLocation();    //---------------------Choose Option In Function Search    //Search By Student Group    $("#divBranchSByStudentGroup").hide();    $("#divStudentGroupS").hide();    $("#divSemesterS").hide();    // Search By Subject Name    $("#divBranchS").hide();    $("#divSubjectS").hide();    $("#divSubjectDateS").hide();    //Search By Week    $("#divListWeekS").hide();    //Search By Location    $("#divBranchSLocation").hide();    $("#divCampusSLocation").hide();    $("#divBranchCampusSLocation").hide();});$("#Courses").on("change", function () {    getStudentGroupByCourse($(this).val());     //remove and show new student group    $("#Semester").html('');        //remove semester});$("#stugroid").on("change", function () {    getSemesterByStudentGroup($(this).val());    $("#startDate").val(null);    listMinMaxDate = [];    arrayStudentGroup = [];    console.log($(this).val());    assignValueStudentGroup($(this).val());    assignValueFromMinMaxOfSem($(this).val());    getLecturerByBranchC($(this).val());});$("#BranchS").on("change", function () {    getSubjectByBranch($(this).val());});//------------------------------Function Search By//Choose Option In Function Search$("#optionSearch").on("change", function () {    switch ($('#optionSearch').val()) {        // Search By Student Group        case 'SBSG':            $("#divBranchSByStudentGroup").show();            $("#divStudentGroupS").show();            $("#divSemesterS").show();            $("#divBranchS").hide();            $("#divSubjectS").hide();            $("#divSubjectDateS").hide();            $("#divListWeekS").hide();            $("#divBranchSLocation").hide();            $("#divCampusSLocation").hide();            $("#divBranchCampusSLocation").hide();            break;        // Search By Subject Name        case 'SBSN':            $("#divBranchSByStudentGroup").hide();            $("#divStudentGroupS").hide();            $("#divSemesterS").hide();            $("#divBranchS").show();            $("#divSubjectS").show();            $("#divSubjectDateS").hide();            $("#divListWeekS").hide();            $("#divBranchSLocation").hide();            $("#divCampusSLocation").hide();            $("#divBranchCampusSLocation").hide();            break;        // Search By Subject Date        case 'SBSD':            $("#divBranchSByStudentGroup").hide();            $("#divStudentGroupS").hide();            $("#divSemesterS").hide();            $("#divBranchS").hide();            $("#divSubjectS").hide();            $("#divSubjectDateS").show();            $("#divListWeekS").hide();            $("#divBranchSLocation").hide();            $("#divCampusSLocation").hide();            $("#divBranchCampusSLocation").hide();            break;        // Search By Location        case 'SBL':            $("#divBranchSByStudentGroup").hide();            $("#divStudentGroupS").hide();            $("#divSemesterS").hide();            $("#divBranchS").hide();            $("#divSubjectS").hide();            $("#divSubjectDateS").hide();            $("#divListWeekS").hide();            $("#divBranchSLocation").show();            $("#divCampusSLocation").show();            $("#divBranchCampusSLocation").show();            break;    }});// Student Group$("#BranchSByStudentGroup").on("change", function () {    getStudentGroupByBranchIdSStudentGroup($(this).val());});$("#StudentGroupS").on("change", function () {    searchSemesterByStudentGroup($(this).val());});// Location$("#BranchSLocation").on("change", function () {    getAllCampusSLocation();    $("#BranchCampusSLocation").html('');});$("#CampusSLocation").on("change", function () {    getBranchCampusSLocation($("#BranchSLocation").val(), $("#CampusSLocation").val());});// -------------------------------------------------------Validate All Form In Timetableconst required = value => value === '' ? false : true;const DateValid = (date) => {    const currentDate = new Date();    const inputDate = new Date(date.value);    if (inputDate.getFullYear() == currentDate.getFullYear()) {        if (inputDate.getMonth() == currentDate.getMonth()) {            if (inputDate.getDate() > currentDate.getDate()) {                return true;            } else {                return false;            }        } else if (inputDate.getMonth() > currentDate.getMonth()) {            return true;        } else {            return false;        }    } else if (inputDate.getFullYear() > currentDate.getFullYear()) {        return true;    } else {        return false;    }};const showError = (input, message) => {    const formField = input.parentElement;    input.classList.remove('is-valid');    input.classList.add('is-invalid');    input.focus();    formField.classList.remove('success');    formField.classList.add('error');    // show message error with wrong input    const error = formField.querySelector('small');    error.classList.add('text-danger');    error.textContent = message;};const showSuccess = (input) => {    const formField = input.parentElement;    input.classList.remove('is-invalid');    input.classList.add('is-valid');    formField.classList.remove('error');    formField.classList.add('success');    // hide message error    const error = formField.querySelector('small');    error.textContent = ''; // assign null value to hide error message};const check_option = (value) => {    if (value == 0) {        return false;    } else {        return true;    }}const checkSelect = (param, mess) => {    var rs = false;    const paramid = param.value;    if (check_option(paramid) == false) {        showError(param, mess + ' can not be blank');        //console.log("Select vao day");    } else {        showSuccess(param);        rs = true;    }    return rs;}// Validate Start Dayconst checkStartDate = (startDate) => {    let valid = false;    const sd = startDate.value;    if (!required(sd)) {        showError(startDate, 'Start Date cannot be blank !');        valid = false;    } else if (!DateValid(startDate)) {        showError(startDate, 'Start Date cannot less than today !');        valid = false    } else {        showSuccess(startDate);        valid = true;    }    return valid;};// Validate Shiftconst checkShift = (inputDate, optionShift) => {    var rs = false;    const vDate = new Date(inputDate);    console.log("Get date " + vDate.getDay());    if (optionShift == 0) {        if (vDate.getDay() == 1 || vDate.getDay() == 3 || vDate.getDay() == 5) {            rs = true;        } else {            rs = false;        }    } else if (optionShift == 1) {        if (vDate.getDay() == 2 || vDate.getDay() == 4 || vDate.getDay() == 6) {            rs = true;        } else {            rs = false;        }    }    return rs;}// Assign Value To MinMaxOfSemfunction assignValueFromMinMaxOfSem(stugroId) {    $.ajax({        url: '/api/admin/timetable/getMinMaxOfSem/' + stugroId,        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            for (var index = 0; index < result.length; index++) {                var objectMinMax = {                    mmid: result[index].mmid,                    openingdate: result[index].openingdate,                    shift: result[index].shift,                    semid: result[index].semid,                    stugroid: result[index].stugroid,                    mindate: result[index].mindate,                    maxdate: result[index].maxdate                };                listMinMaxDate.push(objectMinMax);            }        }    });}// Assign Value To Student Group By Idfunction assignValueStudentGroup(stugroId) {    $.ajax({        url: '/api/admin/timetable/getStudentGroupByID/' + stugroId,        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            arrayStudentGroup.push(result.openingdate);            arrayStudentGroup.push(result.shift);            arrayStudentGroup.push(result.stugroid);        }    });}// Get All Slots In Coursesfunction assignSlotInCourses(stugroId, inputDate, inputSem) {    $.ajax({        url: '/api/admin/timetable/getMinMaxDateToCheck/' + stugroId + '/' + inputSem + '/' + inputDate,        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            minMaxDate.push(result.mindate);            minMaxDate.push(result.maxdate);        }    });}// Validate Days Between Semesters Of Create Functionfunction checkDaysBetweenSemestersCreateFunc(inputDate, inputSem) {    console.log(arrayStudentGroup);    console.log(listMinMaxDate);    var vinputDate = new Date(inputDate.value);    var vinptuSem = Number(inputSem.value) - 1;    var getShift = arrayStudentGroup[Number(1)];    var getOpningDate = new Date(arrayStudentGroup[Number(0)]);    var getMaxDateSem1 = '0000-00-00';    var getMaxDateSem2 = '0000-00-00';    var getMaxDateSem3 = '0000-00-00';    var rs = false;    for (var index = 0; index < listMinMaxDate.length; index++) {        switch (listMinMaxDate[index].semid) {            case 1:                getMaxDateSem1 = new Date(listMinMaxDate[index].maxdate);                break;            case 2:                getMaxDateSem2 = new Date(listMinMaxDate[index].maxdate);                break;            case 3:                getMaxDateSem3 = new Date(listMinMaxDate[index].maxdate);                break;        }    }    console.log("list: " + getShift + '<>' + getOpningDate + '<>' + getMaxDateSem1 + '<>' + getMaxDateSem2 + '<>' + getMaxDateSem3);    console.log("input: " + vinputDate + "<>" + vinptuSem);    switch (Number(vinptuSem)) {        case 1:            if (!required(vinputDate)) {                showError(inputDate, 'Start Date cannot be blank !');                rs = false;            } else if (checkShift(vinputDate, getShift) == false) {                console.log("vao 1");                var chooseShift = (Number(getShift) % 2) == 0 ? '2-4-6' : '3-5-7';                showError(inputDate, inputDate.value + ' does not match session. Choose ' + chooseShift);                rs = false;            } else if (vinputDate < getOpningDate) {                console.log("vao 2");                showError(inputDate, inputDate.value + ' greater than or equal the opening date (' + getOpningDate.getFullYear() + '-' + (parseInt(getOpningDate.getMonth()) + Number(1)) + '-' + getOpningDate.getDate() + ')');                rs = false;            } else {                showSuccess(inputDate);                rs = true;            }            break;        case 2:            if (!required(vinputDate)) {                showError(inputDate, 'Start Date cannot be blank !');                rs = false;            } else if (checkShift(vinputDate, getShift) == false) {                console.log("vao 1");                var chooseShift = (Number(getShift) % 2) == 0 ? '2-4-6' : '3-5-7';                showError(inputDate, inputDate.value + ' does not match session. Choose ' + chooseShift);                rs = false;            } else if (vinputDate <= getMaxDateSem1) {                console.log("vao 2");                showError(inputDate, inputDate.value + ' is bigger than the semester 1 (' + getMaxDateSem1.getFullYear() + '-' + (parseInt(getMaxDateSem1.getMonth()) + Number(1)) + '-' + getMaxDateSem1.getDate() + ')');                rs = false;            } else {                showSuccess(inputDate);                rs = true;            }            break;        case 3:            if (!required(vinputDate)) {                showError(inputDate, 'Start Date cannot be blank !');                rs = false;            } else if (checkShift(vinputDate, getShift) == false) {                console.log("vao 1");                var chooseShift = (Number(getShift) % 2) == 0 ? '2-4-6' : '3-5-7';                showError(inputDate, inputDate.value + ' does not match session. Choose ' + chooseShift);                rs = false;            } else if (vinputDate <= getMaxDateSem2) {                console.log("vao 2");                showError(inputDate, inputDate.value + ' is bigger than the semester 2 (' + getMaxDateSem2.getFullYear() + '-' + (parseInt(getMaxDateSem2.getMonth()) + Number(1)) + '-' + getMaxDateSem2.getDate() + ')');                rs = false;            } else {                showSuccess(inputDate);                rs = true;            }            break;        case 4:            if (!required(vinputDate)) {                showError(inputDate, 'Start Date cannot be blank !');                rs = false;            } else if (checkShift(vinputDate, getShift) == false) {                console.log("vao 1");                var chooseShift = (Number(getShift) % 2) == 0 ? '2-4-6' : '3-5-7';                showError(inputDate, inputDate.value + ' does not match session. Choose ' + chooseShift);                rs = false;            } else if (vinputDate <= getMaxDateSem3) {                console.log("vao 2");                showError(inputDate, inputDate.value + ' is bigger than the semester 3 (' + getMaxDateSem3.getFullYear() + '-' + (parseInt(getMaxDateSem3.getMonth()) + Number(1)) + '-' + getMaxDateSem3.getDate() + ')');                rs = false;            } else {                showSuccess(inputDate);                rs = true;            }            break;    }    return rs;}// Validate Days Between Semesters Of Update Functionfunction checkDaysBetweenSemestersUpdateFunc(stugroId, inputDate, inputSem) {    listMinMaxDate = [];    arrayStudentGroup = [];    minMaxDate = [];    assignValueStudentGroup(stugroId.value);    assignValueFromMinMaxOfSem(stugroId.value);    assignSlotInCourses(stugroId.value, inputDate.value, vinptuSem);    var mixdate = new Date(minMaxDate[Number(0)]);    var maxdate = new Date(minMaxDate[Number(1)]);    var vinputDate = new Date(inputDate.value);    var vinptuSem = inputSem.value;    var getShift = arrayStudentGroup[Number(1)];    var getOpningDate = new Date(arrayStudentGroup[Number(0)]);    var getMinDateSem1 = '0000-00-00';    var getMinDateSem2 = '0000-00-00';    var getMinDateSem3 = '0000-00-00';    var getMinDateSem4 = '0000-00-00';    var getMaxDateSem1 = '0000-00-00';    var getMaxDateSem2 = '0000-00-00';    var getMaxDateSem3 = '0000-00-00';    var rs = false;    for (var index = 0; index < listMinMaxDate.length; index++) {        switch (listMinMaxDate[index].semid) {            case 1:                getMinDateSem1 = new Date(listMinMaxDate[index].mindate);                getMaxDateSem1 = new Date(listMinMaxDate[index].maxdate);                break;            case 2:                getMinDateSem2 = new Date(listMinMaxDate[index].mindate);                getMaxDateSem2 = new Date(listMinMaxDate[index].maxdate);                break;            case 3:                getMinDateSem3 = new Date(listMinMaxDate[index].mindate);                getMaxDateSem3 = new Date(listMinMaxDate[index].maxdate);                break;            case 4:                getMinDateSem4 = new Date(listMinMaxDate[index].mindate);                break;        }    }    switch (vinptuSem) {        case "1":            if (!required(vinputDate)) {                showError(inputDate, 'Start Date cannot be blank !');                rs = false;            } else if (checkShift(vinputDate, getShift) == false) {                console.log("case update 1: Shift");                var chooseShift = Number(getShift) == 0 ? '2-4-6' : '3-5-7';                showError(inputDate, inputDate.value + ' does not match session. Choose ' + chooseShift);                rs = false;            } else if (vinputDate < getOpningDate) {                console.log(vinputDate + " < " + getOpningDate);                showError(inputDate, inputDate.value + ' is bigger than the opening date (' + getOpningDate.getFullYear() + '-' + (getOpningDate.getMonth() + 1) + '-' + getOpningDate.getDate() + ')');                rs = false;            } else if (maxdate >= getMinDateSem2) {                console.log(maxdate + " >= " + getMinDateSem2);                showError(inputDate, 'Insufficient number of lessons');                rs = false;            } else {                showSuccess(inputDate);                rs = true;            }            break;        case "2":            if (!required(vinputDate)) {                showError(inputDate, 'Start Date cannot be blank !');                rs = false;            } else if (checkShift(vinputDate, getShift) == false) {                console.log("vao 1");                var chooseShift = Number(getShift) == 0 ? '2-4-6' : '3-5-7';                showError(inputDate, inputDate.value + ' does not match session. Choose ' + chooseShift);                rs = false;            } else if (vinputDate <= getMaxDateSem1) {                console.log("vao 2");                showError(inputDate, inputDate.value + ' is bigger than the semester 1 (' + getMaxDateSem1.getFullYear() + '-' + (getMaxDateSem1.getMonth() + 1) + '-' + getMaxDateSem1.getDate() + ')');                rs = false;            } else if (maxdate >= getMinDateSem3) {                console.log("vao 4");                showError(inputDate, 'Insufficient number of lessons');                rs = false;            } else {                showSuccess(inputDate);                rs = true;            }            break;        case "3":            if (!required(vinputDate)) {                showError(inputDate, 'Start Date cannot be blank !');                rs = false;            } else if (checkShift(vinputDate, getShift) == false) {                console.log("vao 1");                var chooseShift = Number(getShift) == 0 ? '2-4-6' : '3-5-7';                showError(inputDate, inputDate.value + ' does not match session. Choose ' + chooseShift);                rs = false;            } else if (vinputDate <= getMaxDateSem2) {                console.log("vao 2");                showError(inputDate, inputDate.value + ' is bigger than the semester 2 (' + getMaxDateSem2.getFullYear() + '-' + (getOpningDate.getMonth() + 1) + '-' + getMaxDateSem2.getDate() + ')');                rs = false;            } else if (maxdate >= getMinDateSem4) {                console.log("vao 4");                showError(inputDate, 'Insufficient number of lessons');                rs = false;            } else {                showSuccess(inputDate);                rs = true;            }            break;        case "4":            if (!required(vinputDate)) {                showError(inputDate, 'Start Date cannot be blank !');                rs = false;            } else if (checkShift(vinputDate, getShift) == false) {                console.log("vao 1");                var chooseShift = Number(getShift) == 0 ? '2-4-6' : '3-5-7';                showError(inputDate, inputDate.value + ' does not match session. Choose ' + chooseShift);                rs = false;            } else if (vinputDate <= getMaxDateSem3) {                console.log("vao 2");                showError(inputDate, inputDate.value + ' is bigger than the semester 3 (' + getMaxDateSem3.getFullYear() + '-' + getMaxDateSem3.getMonth() + '-' + getMaxDateSem3.getDate() + ')');                rs = false;            } else {                showSuccess(inputDate);                rs = true;            }            break;    }    return rs;}// -------------------------------------------------------Create In Timetable//Get All Coursefunction getAllCourses() {    $.ajax({        url: '/api/admin/timetable/getAllCourse',        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="0" selected>--- Select Course ---</option>';            for (var i in result) {                option += '<option class="courseOption" value="' + result[i].courid + '">' + result[i].cournm + '</option>';            }            $("#Courses").html(option);        }    });}//Get Student Group By Course IDfunction getStudentGroupByCourse(courseId) {    $.ajax({        url: '/api/admin/timetable/getStudentGroupByCourses/' + courseId,        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="0" selected>-- Select Student Group --</option>';            for (var i in result) {                option += '<option class="stuGroupOption" value="' + result[i].stugroid + '">' + result[i].stugronm + '</option>';            }            $("#stugroid").html(option);        }    });}//Get Semester By Student Group IDfunction getSemesterByStudentGroup(stugroId) {    $.ajax({        url: '/api/admin/timetable/getSemesterByStudentGroup/' + stugroId,        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var semMinId = result[0].semid;            var semMinNm = result[0].semnm;            console.log(semMinId + '-' + semMinNm);            var option = '<option value="0" selected>--- Select Semester ---</option>';            console.log(semMinId + '-' + semMinNm);            option += '<option class="semOption" value="' + semMinId + '">' + semMinNm + '</option>';            $("#Semester").html(option);        }    });}//Get Lecturer By Student Group IDfunction getAllLecturerC() {    $.ajax({        url: '/api/admin/timetable/getAllLecturer',        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="0" selected>--- Select Lecturer ---</option>';            for (var i in result) {                option += '<option class="lecturerCTT " value="' + result[i].lecturid + '">' + result[i].rollnum + '-' + result[i].fullnm + '</option>';            }            $("#LecturerC").html(option);        }    });}//Create FunctionformCreateTimetable.addEventListener('input', function (e) {    switch (e.target.id) {        case 'Courses':            checkSelect(Courses, 'Courses ');            break;        case 'stugroid':            checkSelect(StudentGroup, 'Student Group ');            break;        case 'Semester':            checkSelect(Semester, 'Semester ');            break;        case 'startDate':            checkDaysBetweenSemestersCreateFunc(StartDate, Semester);            break;        case 'LecturerC':            checkSelect(createLecturer, 'Lecturer ');            break;    }});formCreateTimetable.addEventListener('submit', function (e) {    e.preventDefault();    let isCoursesValid = checkSelect(Courses, 'Courses '),        isStudentGroupValid = checkSelect(StudentGroup, 'Student Group '),        isSemesterValid = checkSelect(Semester, 'Semester '),        isStartDateValid = checkDaysBetweenSemestersCreateFunc(StartDate, Semester),        isLecturerCValid = checkSelect(createLecturer, 'Lecturer ');    let isFormValid = isCoursesValid && isStudentGroupValid && isSemesterValid && isStartDateValid && isLecturerCValid;    // submit to the server if the form is valid    console.log(isFormValid);    if (isFormValid) {        var formdata = {            courid: $('#Courses').val(),            semid: $('#Semester').val(),            stugroid: $('#stugroid').val(),            startDate: $('#startDate').val(),            lecturerid: $('#LecturerC').val(),        }        console.log(formdata);        $.ajax({            type: 'POST',            url: '/api/admin/timetable/createTimetable',            data: JSON.stringify(formdata),            dataType: 'json',            contentType: 'application/json',            success: function (result) {                Swal.fire({                    position: 'center',                    icon: 'success',                    title: 'Create Timetable Success',                    showConfirmButton: false,                    timer: 1000                });                setTimeout("location.reload(true);", 1000);            },            error: function () {                Swal.fire({                    position: 'center',                    icon: 'error',                    title: 'Error',                    showConfirmButton: false,                    timer: 1000                });            }        });    }});// -------------------------------------------------------Update In Timetable//Get Lecturer By Branch ID Updatefunction getAllLecturerUFunc() {    $.ajax({        url: '/api/admin/timetable/getAllLecturer',        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="0" selected>--- Select Lecturer ---</option>';            for (var i in result) {                option += '<option class="lecturerOptionUpdateTT" value="' + result[i].lecturid + '">' + result[i].rollnum + '-' + result[i].fullnm + '</option>';            }            $("#LecturerUpdateTT").html(option);        }    });}//Update FunctionformUpdateTimetable.addEventListener('input', function (e) {    switch (e.target.id) {        // case 'StartDateUpdateTT':        //     checkDaysBetweenSemestersUpdateFunc(updateStudentGroup, updateStartDate, updateSemester);        //     break;        case 'LecturerUpdateTT':            checkSelect(updateLecturer, 'Lecturer ');            break;    }});formUpdateTimetable.addEventListener('submit', function (e) {    e.preventDefault();    // let isStartDateValid = checkDaysBetweenSemestersUpdateFunc(updateStudentGroup, updateStartDate, updateSemester),    let isLecturerValid = checkSelect(updateLecturer, 'Lecturer ');    let isFormValid = isLecturerValid;    // submit to the server if the form is valid    console.log(isFormValid);    if (isFormValid) {        var formdata = {            semid: $('#SemesterUpdateTT').val(),            stugroid: $('#StudentGroupUpdateTT').val(),            startDate: $('#StartDateUpdateTT').val(),            lecturerid: $('#LecturerUpdateTT').val(),        }        console.log(formdata);        $.ajax({            type: 'POST',            url: '/api/admin/timetable/updateTimetable',            data: JSON.stringify(formdata),            dataType: 'json',            contentType: 'application/json',            success: function (result) {                Swal.fire({                    position: 'center',                    icon: 'success',                    title: 'Update Timetable Success',                    showConfirmButton: false,                    timer: 1000                });                setTimeout("location.reload(true);", 1000);            },            error: function () {                Swal.fire({                    position: 'center',                    icon: 'error',                    title: 'Error',                    showConfirmButton: false,                    timer: 1000                });            }        });    }});// -------------------------------------------------------Update Lecturer In Timetable//Get Lecturer By Branch ID Update In Rowfunction getAllLecturerUTeacherFunc() {    $.ajax({        url: '/api/admin/timetable/getAllLecturer',        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="0" selected>--- Select Lecturer ---</option>';            for (var i in result) {                option += '<option class="TeacherUTTT" value="' + result[i].lecturid + '">' + result[i].rollnum + '-' + result[i].fullnm + '</option>';            }            $("#TeacherUT").html(option);        }    });}//Find Teacher By Idfunction findTeacher(elem, timtetableid) {    var id = elem.querySelector('input').value;    console.log(id);    $.ajax({        type: 'GET',        url: '/api/admin/timetable/getLecturerByID/' + id,        datatype: "JSON",        data: '',        success: function (result) {            $('#teacherIdUTeacher').val(timtetableid);            $('#TeacherUT').val(id);        }    });}//Update Teacher FunctionformUpdateTeacherTimetable.addEventListener('input', function (e) {    switch (e.target.id) {        case 'TeacherUT':            checkSelect(TeacherUT, 'Teacher ');            break;    }});formUpdateTeacherTimetable.addEventListener('submit', function (e) {    e.preventDefault();    let isTeacherValid = checkSelect(TeacherUT, 'Teacher ');    let isFormValid = isTeacherValid;    // submit to the server if the form is valid    console.log(isFormValid);    if (isFormValid) {        var formdata = {            timetableid: $('#teacherIdUTeacher').val(),            teaid: $('#TeacherUT').val()        }        console.log(formdata);        $.ajax({            type: 'POST',            url: '/api/admin/timetable/updateTeacherInTimetable',            data: JSON.stringify(formdata),            dataType: 'json',            contentType: 'application/json',            success: function (result) {                Swal.fire({                    position: 'center',                    icon: 'success',                    title: 'Update Teacher In Timetable Success',                    showConfirmButton: false,                    timer: 1000                });                setTimeout("location.reload(true);", 1000);            },            error: function () {                Swal.fire({                    position: 'center',                    icon: 'error',                    title: 'Error',                    showConfirmButton: false,                    timer: 1000                });            }        });    }});// -------------------------------------------------------Delete In Timetable//Delete Functionfunction deleteTimetable() {    console.log("delete day");    var formdata = {        semid: $('#SemesterUpdateTT').val(),        stugroid: $('#StudentGroupUpdateTT').val(),    }    console.log(formdata);    Swal.fire({        title: 'Do you want to delete ?',        showDenyButton: true,        showCancelButton: false,        confirmButtonText: `Yes`,        denyButtonText: `No`,    }).then((result) => {        /* Read more about isConfirmed, isDenied below */        if (result.isConfirmed) {            $.ajax({                type: 'POST',                url: '/api/admin/timetable/removeTimetable',                data: JSON.stringify(formdata),                dataType: 'json',                contentType: 'application/json',                success: function () {                    Swal.fire('Saved!', '', 'success');                    setTimeout("location.reload(true);", 1000);                }            })        } else if (result.isDenied) {            Swal.fire('Changes are not saved', '', 'info');        }    });};// -------------------------------------------------------Search In Timetable// -----------------------Function Search By Student Group//Get All Branchfunction getAllBranchSStudentGroup() {    $.ajax({        url: '/api/admin/timetable/getAllBranch',        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="select" disabled selected>--- Select Branch ---</option>';            for (var i in result) {                option += '<option class="branchLocationOptionSByStudentGroup" value="' + result[i].branchid + '">' + result[i].branchnm + '</option>';            }            $("#BranchSByStudentGroup").html(option);        }    });}//Get Student Group By Branch Idfunction getStudentGroupByBranchIdSStudentGroup(branchID) {    $.ajax({        url: '/api/admin/timetable/getStudentGroupByBranch/' + branchID,        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="select" disabled selected>--- Select Student Group ---</option>';            for (var i in result) {                option += '<option class="courseOption" value="' + result[i].stugroid + '">' + result[i].stugronm + '</option>';            }            $("#StudentGroupS").html(option);        }    });}//Get Semester By Student Group Idfunction searchSemesterByStudentGroup(stugroId) {    $.ajax({        url: '/api/admin/timetable/searchSemesterByStudentGroup/' + stugroId,        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="select" disabled selected>--- Select Semester ---</option>';            for (var index = 0; index < result.length; index++) {                option += '<option class="semSearchST" value="' + result[index].semid + '">' + result[index].semnm + '</option>';            }            $("#SemesterS").html(option);        }    });}// -----------------------Function Search By Subject Name//Get All Branchfunction getAllBranchS() {    $.ajax({        url: '/api/admin/timetable/getAllBranch',        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="select" disabled selected>--- Select Branch ---</option>';            for (var i in result) {                option += '<option class="branchOptionS" value="' + result[i].branchid + '">' + result[i].branchnm + '</option>';            }            $("#BranchS").html(option);        }    });}//Get Subject By Branch IDfunction getSubjectByBranch(subjid) {    $.ajax({        url: '/api/admin/timetable/getSubjectByBranch/' + subjid,        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="select" disabled selected>--- Select Subject ---</option>';            for (var index = 0; index < result.length; index++) {                option += '<option class="subjectOptionS" value="' + result[index].subjid + '">' + result[index].shortnm + ' - ' + result[index].subjnm + '</option>';            }            $("#SubjectS").html(option);        }    });}// -----------------------Function Search By Location//Get All Branchfunction getAllBranchSLocation() {    $.ajax({        url: '/api/admin/timetable/getAllBranch',        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="select" disabled selected>--- Select Branch ---</option>';            for (var i in result) {                option += '<option class="branchLocationOptionS" value="' + result[i].branchid + '">' + result[i].branchnm + '</option>';            }            $("#BranchSLocation").html(option);        }    });}//Get All Campusfunction getAllCampusSLocation() {    $.ajax({        url: '/api/admin/timetable/getAllCampus',        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="select" disabled selected>--- Select Campus ---</option>';            for (var i in result) {                option += '<option class="CampusOptionS" value="' + result[i].campusid + '">' + result[i].campusnm + '</option>';            }            $("#CampusSLocation").html(option);        }    });}//Get Location By Branch ID And Campus IDfunction getBranchCampusSLocation(branchid, campusid) {    $.ajax({        url: '/api/admin/timetable/getBranchCampusByBranchIdAndCampusId/' + branchid + '/' + campusid,        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="select" disabled selected>--- Select Location ---</option>';            for (var i in result) {                option += '<option class="BranchCampusOptionSLocation" value="' + result[i].branchcamid + '">' + result[i].address + '</option>';            }            $("#BranchCampusSLocation").html(option);        }    });}//Format Datefunction formatDate(date) {    var year = date.getFullYear().toString();    var month = (date.getMonth() + 101).toString().substring(1);    var day = (date.getDate() + 100).toString().substring(1);    return year + "-" + month + "-" + day;}// Main Funtion Search$("#btnSearchTimetable").click(function () {    var option, semid, studentgroupid, subjectid;    var resultURL = '/api/admin/timetable';    option = $('#optionSearch').val();    //Function Success Of Search By Student Group (SBSG)    const optionSBSG = (result) => {        var blockTT = `<div class="card"><div class="card-body"><div class="row align-items-center"><div` +            ` class="d-print-none"><div class="row "><div class="d-flex` +            ` justify-content-between"><div class="mr-auto p-2"><h2 class="text-uppercase">Timetable Management</h2></div><div` +            ` class="p-2">`;        var today = new Date();        var currentDate = formatDate(new Date(today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate()));        var checkDate = formatDate(new Date(result[0].subjdate));        if (checkDate <= currentDate) {            blockTT += `<button disabled class="btn btn-vk btn-sm" data-bs-toggle="modal" data-bs-target="#modal-update-timetable" id="btnUpdateTT"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 15l8.385 -8.415a2.1 2.1 0 0 0 -2.97 -2.97l-8.415 8.385v3h3z" /><path d="M16 5l3 3" /><path d="M9 7.07a7.002 7.002 0 0 0 1 13.93a7.002 7.002 0 0 0 6.929 -5.999" /></svg> Edit</button>`;            blockTT += `<button disabled class="btn btn-google btn-sm" id="btnDeleteTT" onclick="deleteTimetable()">Delete</button>`;        } else {            blockTT += `<button class="btn btn-vk btn-sm" data-bs-toggle="modal" data-bs-target="#modal-update-timetable" id="btnUpdateTT"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 15l8.385 -8.415a2.1 2.1 0 0 0 -2.97 -2.97l-8.415 8.385v3h3z" /><path d="M16 5l3 3" /><path d="M9 7.07a7.002 7.002 0 0 0 1 13.93a7.002 7.002 0 0 0 6.929 -5.999" /></svg> Edit</button>`;            blockTT += `<button class="btn btn-google btn-sm" id="btnDeleteTT" onclick="deleteTimetable()">Delete</button>`;        }        blockTT += `</div></div></div></div></div></div><div class="card-body"><div class="table-responsive"><table id="tabledb1" class="table table-vcenter card-table table-striped table-bordered display">`;        if (Number(result.length) > 0) {            for (var index = 0; index < result.length; index++) {                var lecturerName = "";                if (index == 0 || (result[index].subjectname != result[index - 1].subjectname)) {                    if (result[index].subjectname != "Day Off") {                        blockTT += '<thead><td colspan="8" class="ttSum h3" id="tt' + result[index].timetableid + '">' + result[index].subjectname + ' - ' + result[index].stugronm + ' - Semester ' + Number(result[index].semid) + ' - ' + result[index].branchnm + '</td></thead>';                        blockTT += '<thead><th>Subject Code</th><th>Duration</th><th>Subject' +                            ' Date<br/>(YYYY-MM-DD)</th><th>Room</th><th>Lecturer' +                            ' Name</th><th>Campus</th><th>Addess</th><th>Action<br/><small>(Change Lecturer)</small></th></thead>';                    }                }                blockTT += '<tbody><tr class="tt' + result[index].timetableid + '">';                blockTT += '<td class="subjnm">' + result[index].subjnm + '</td>';                blockTT += '<td class="slotofsubjdate">' + (result[index].slotofsubjdate).slice(Number((result[index].slotofsubjdate).lastIndexOf('?')) + 1) + '</td>';                blockTT += '<td class="subjdate">' + result[index].subjdateofmonth + ' ' + result[index].subjdate + '</td>';                blockTT += '<td class="roomid" >' + result[index].roomid + '</td>';                if (result[index].teanm === null) {                    lecturerName = "No Lecturer";                } else {                    lecturerName = result[index].teanm;                }                blockTT += '<td class="teanm" >' + lecturerName + '</td>';                blockTT += '<td class="branchcamnm" >' + result[index].branchcamnm + '</td>';                blockTT += '<td class="address" >' + result[index].address + '</td>';                var today = new Date();                var currentDate = formatDate(new Date(today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate()));                var checkDate = formatDate(new Date(result[index].subjdate));                console.log(checkDate +">"+ currentDate);                if ((checkDate > currentDate)) {                    if (((result[index].subjnm) !== 'Day Off')) {                        blockTT += '<td><button class="btn btn-vk btn-icon" onclick="findTeacher(this,' + result[index].timetableid + ')" data-bs-toggle="modal" data-bs-target="#modal-update-teacher"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M9 7h-3a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-3" /><path d="M9 15h3l8.5 -8.5a1.5 1.5 0 0 0 -3 -3l-8.5 8.5v3" /><line x1="16" y1="5" x2="19" y2="8" /></svg><input type="tel" hidden value="' + result[index].attenteaid + '"></button></td>';                    } else {                        blockTT += '<td><button class="btn btn-vk btn-icon" disabled data-bs-toggle="modal" data-bs-target="#modal-update-teacher"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M9 7h-3a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-3" /><path d="M9 15h3l8.5 -8.5a1.5 1.5 0 0 0 -3 -3l-8.5 8.5v3" /><line x1="16" y1="5" x2="19" y2="8" /></svg></button></td>';                    }                } else {                    blockTT += '<td><button class="btn btn-vk btn-icon" disabled data-bs-toggle="modal" data-bs-target="#modal-update-teacher"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M9 7h-3a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-3" /><path d="M9 15h3l8.5 -8.5a1.5 1.5 0 0 0 -3 -3l-8.5 8.5v3" /><line x1="16" y1="5" x2="19" y2="8" /></svg></button></td>';                }                blockTT += '</tr></tbody>';            }        } else {            blockTT += `<tr><td colspan="9" style="text-align: center; vertical-align: middle;">Student Group Has No Semester</td></tr>`;        }        blockTT += `</table></div></div></div>`;        $("#renderTT").html(blockTT);    };    //Function Success Of Search By Subject Name (SBSN)    const optionSBSN = (result) => {        var blockTT = '<div class="table-responsive"><table id="tabledb1" class="table table-vcenter card-table' +            ' table-striped table-bordered display"><thead><tr><th>Subject Name</th><th>Slots</th><th>Subject Date</th><th>Teacher' +            ' Name</th><th>Semester</th><th>Courses</th><th>Student Group</th></tr></thead><tbody>';        if (Number(result.length) > 0) {            for (var index = 0; index < result.length; index++) {                blockTT += '<tr><td>' + result[index].shortnm + ' - ' + result[index].subjectname + '</td><td>' + result[index].slots + '</td><td>' + result[index].studytime + '</td><td>' + result[index].teaname + '</td><td>' + result[index].semname + '</td><td>' + result[index].coursename + '</td><td>' + result[index].stugronm + '</td></tr>';            }        } else {            blockTT += '<tr><td colspan="7" style="text-align: center; vertical-align: middle;">No Date</td></tr>';        }        blockTT += '</tbody></table></div>';        $("#renderTT").html(blockTT);    };    //Function Success Of Search By Subject Date (SBSD)    const optionSBSD = (result) => {        var blockTT = '<div class="table-responsive"><table id="tabledb1" class="table table-vcenter card-table' +            ' table-striped table-bordered display"><thead><tr><th>Subject Name</th><th>Subject Date</th><th>Teacher' +            ' Name</th><th>Semester</th><th>Courses</th><th>Student Group</th></tr></thead><tbody>';        if (Number(result.length) > 0) {            for (var index = 0; index < result.length; index++) {                blockTT += '<tr><td>' + result[index].shortnm + ' - ' + result[index].subjectname + '</td><td>' + result[index].subjdate + '</td><td>' + result[index].teaname + '</td><td>' + result[index].semname + '</td><td>' + result[index].coursename + '</td><td>' + result[index].stugronm + '</td></tr>';            }        } else {            blockTT += '<tr><td colspan="6" style="text-align: center; vertical-align: middle;">No Data</td></tr>';        }        blockTT += '</tbody></table></div>';        $("#renderTT").html(blockTT);    };    //Function Success Of Search By Location (SBL)    const optionSBL = (result) => {        var asd = "";        var zxc = "";        var numrowspan = 0;        var blockTT = '<div class="table-responsive"><table id="tabledb1" class="table table-vcenter card-table' +            ' table-striped table-bordered display"><thead><tr><th>Branch Name</th><th>Courses Name</th><th>Student' +            ' Group</th><th>Semester</th><th>Study Time</th><th>Main Lecturer</th><th>Room</th></tr></thead><tbody>';        if (Number(result.length) > 0) {            console.log(result);            for (var index = 0; index < result.length; index++) {                if (index == 0 || (result[index].stugronm != result[index - 1].stugronm)) {                    blockTT += '<tr><td rowspan="' + result[index].maxsem + '">' + result[index].branchnm +                        '</td><td rowspan="' + result[index].maxsem + '">' + result[index].coursesnm +                        '</td><td rowspan="' + result[index].maxsem + '">' + result[index].stugronm +                        '</td><td>' + result[index].semid +                        '</td><td>' + result[index].studytime +                        '</td><td>' + result[index].maintea +                        '</td><td>' + result[index].roomid + '</td></tr>';                } else {                    blockTT += '<tr><td>' + result[index].semid +                        '</td><td>' + result[index].studytime +                        '</td><td>' + result[index].maintea +                        '</td><td>' + result[index].roomid + '</td></tr>';                }            }        } else {            blockTT += '<tr><td colspan="6" style="text-align: center; vertical-align: middle;">No Data</td></tr>';        }        blockTT += '</tbody></table></div>';        $("#renderTT").html(blockTT);    };    // Set value to resultURL    switch (option) {        case 'SBSG':            console.log("vao roi1");            semid = $('#SemesterS').val();            studentgroupid = $('#StudentGroupS').val();            if (semid == null) {                semid = Number(0);            }            resultURL += '/rederSemesterOfStudentGroup/' + studentgroupid + '/' + (Number(semid) - 1);            $('#StudentGroupUpdateTT').val(studentgroupid);            $('#SemesterUpdateTT').val(Number(semid) - 1);            $('#StudentGroupUpdateTTGetText').val($("#StudentGroupS option:selected").text());            break;        case 'SBSN':            console.log("vao roi2");            subjectid = $('#SubjectS').val();            if (subjectid == null) {                subjectid = Number(0);            }            resultURL += '/renderSubOfFuncSearchSubByBranch/' + subjectid;            break;        case 'SBSD':            startDate = $('#SubjectDateSStartDate').val();            endDate = $('#SubjectDateSEndDate').val();            // checkStartDateFuncSearch(startDate);            // checkEndDateFuncSearch(startDate,endDate);            resultURL += '/renderSubByDate/' + startDate + '/' + endDate;            break;        case 'SBL':            branchcamid = $('#BranchCampusSLocation').val();            resultURL += '/renderDataByBranchCampusID/' + branchcamid;            break;    }    $.ajax({        url: resultURL,        type: "GET",        datatype: "JSON",        data: '',        success: function (res) {            switch (option) {                case 'SBSG':                    optionSBSG(res);                    $('table.display').DataTable({                        dom: '<"tabletil">Bfrtip',                        bPaginate: false,                        scrollY: 700,                        order: [[3, "asc"]],                        buttons: [                            {                                extend: 'excelHtml5',                                exportOptions: {                                    columns: ':visible'                                }                            },                            {                                extend: 'pdfHtml5',                                exportOptions: {                                    columns: ':visible'                                }                            },                            'colvis'                        ]                    });                    break;                case 'SBSN':                    optionSBSN(res);                    $('table.display').DataTable({                        dom: '<"tabletil">Bfrtip',                        bPaginate: false,                        scrollY: 700,                        order: [[3, "asc"]],                        buttons: [                            {                                extend: 'excelHtml5',                                exportOptions: {                                    columns: ':visible'                                }                            },                            {                                extend: 'pdfHtml5',                                exportOptions: {                                    columns: ':visible'                                }                            },                            'colvis'                        ]                    });                    break;                case 'SBSD':                    optionSBSD(res);                    $('table.display').DataTable({                        dom: '<"tabletil">Bfrtip',                        bPaginate: false,                        scrollY: 700,                        order: [[3, "asc"]],                        buttons: [                            {                                extend: 'excelHtml5',                                exportOptions: {                                    columns: ':visible'                                }                            },                            {                                extend: 'pdfHtml5',                                exportOptions: {                                    columns: ':visible'                                }                            },                            'colvis'                        ]                    });                    break;                case 'SBL':                    optionSBL(res);                    $('table.display').DataTable({                        dom: '<"tabletil">Bfrtip',                        bPaginate: false,                        scrollY: 700,                        order: [[3, "asc"]],                        buttons: [                            {                                extend: 'excelHtml5',                                exportOptions: {                                    columns: ':visible'                                }                            },                            {                                extend: 'pdfHtml5',                                exportOptions: {                                    columns: ':visible'                                }                            },                            'colvis'                        ]                    });                    break;            }        }    });});