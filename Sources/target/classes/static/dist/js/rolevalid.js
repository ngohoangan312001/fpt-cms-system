const Rolenm = document.querySelector('#rolenm');const Descriptions = document.querySelector('#descriptions');const form = document.querySelector('#createRole');const required = value => value === '' ? false : true;const between = (length, min, max) => length < min || length > max ? false : true;const NameValid = (name) => {    const regex = /^(([a-zA-Z]+[ ]{1}|[a-zA-Z]+|[])+)$/;    return regex.test(name);};const showError = (input, message) => {    const formField = input.parentElement;    input.classList.remove('is-valid');    input.classList.add('is-invalid');    input.focus();    formField.classList.remove('success');    formField.classList.add('error');    // show message error with wrong input    const error = formField.querySelector('small');    error.classList.add('text-danger');    error.textContent = message;};const showSuccess = (input) => {    const formField = input.parentElement;    input.classList.remove('is-invalid');    input.classList.add('is-valid');    formField.classList.remove('error');    formField.classList.add('success');    // hide message error    const error = formField.querySelector('small');    error.textContent = ''; // assign null value to hide error message};const showNormal = (input) => {    const formField = input.parentElement;    input.classList.remove('is-invalid');    input.classList.remove('is-valid');    formField.classList.remove('error');    formField.classList.remove('success');    // hide message error    const error = formField.querySelector('small');    error.textContent = ''; // assign null value to hide error message};// Validate Last nameconst checkRolename = (role_name) => {    let valid = false;    const min = 6,        max = 50;    const rolename = role_name.value;    if (!required(rolename)) {        showError(role_name, 'Role Name cannot be blank !');    } else if (!between(rolename.length, min, max)) {        showError(role_name, 'Role Name must be between ' + min + ' and ' + max + ' characters');    } else if (!NameValid(rolename)) {        showError(role_name, 'Role Name must not have number or special character');    } else {        showSuccess(role_name);        valid = true;    }    return valid;}// Validate Last nameconst checkDescription = (descriptions) => {    let valid = false;    const min = 0, max = 250;    const des = descriptions.value;    if (!between(des.length, min, max)) {        showError(descriptions, 'Description must be lowerthan '+ max + ' characters');    } else {        showSuccess(descriptions);        valid = true;    }    return valid;}//Trigger validation checkform.addEventListener('input', function (e) {    switch (e.target.id) {        case 'rolenm':            checkRolename(Rolenm);            break;        case 'descriptions':            checkDescription(Descriptions);            break;    }});// Prevent the form submitform.addEventListener('submit', function (e) {    e.preventDefault();    // validate form    let isRolenameValid = checkRolename(Rolenm),        isDescrptionValid = checkDescription(Descriptions);    let isFormValid = isRolenameValid && isDescrptionValid;    // submit to the server if the form is valid    if (isFormValid) {        var formdata = {rolenm:Rolenm.value, descriptions:Descriptions.value};        $.ajax({            url: "/api/admin/role/postCreate",            type: 'POST',            enctype: 'multipart/form-data',            dataType: 'json',            data: JSON.stringify(formdata),            cache: false,            contentType:'application/json',            processData: false,            success: function (result) {                if (result.title === 'error') {                    Swal.fire({                        postition: 'top-end',                        icon: result.title,                        title: result.message,                        showConfirmButton: true                    });                }                else{                    Swal.fire({                        postition: 'top-end',                        icon: result.title,                        title: result.message,                        showConfirmButton: false,                        timer: 1000                    });                    setTimeout("location.reload(true);", 1000);                }            }        });    }});// Edit rolefunction doUpdateRole(elem) {    var roleid = elem.querySelector('input').value;    console.log(roleid);    $.ajax({        type: 'get',        url: '/api/admin/role/roleFind/' + roleid,        success: function(result) {            $('#updateRole #roleid').val(result.roleid);            $('#updateRole #editrolenm').val(result.rolenm);            $('#updateRole #editdescriptions').val(result.descriptions);        }    });}const EditRolenm = document.querySelector('#updateRole #editrolenm');const EditDescription = document.querySelector('#updateRole #editdescriptions');const Roleid = document.querySelector('#updateRole #roleid');const Editform = document.querySelector('#editRole');// Validate Last nameconst editRolenm = (edit_role_name) => {    let valid = false;    const min = 6,        max = 50;    const rolename = edit_role_name.value;    if (!required(rolename)) {        showError(edit_role_name, 'Role Name cannot be blank !');    } else if (!between(rolename.length, min, max)) {        showError(edit_role_name, 'Role Name must be between ' + min + ' and ' + max + ' characters');    } else if (!NameValid(rolename)) {        showError(edit_role_name, 'Role Name must not have number or special character');    } else {        showSuccess(edit_role_name);        valid = true;    }    return valid;}// Validate Last nameconst editDescriptions = (edit_descriptions) => {    let valid = false;    const min = 0, max = 250;    const des = edit_descriptions.value;    if (!between(des.length, min, max)) {        showError(edit_descriptions, 'Description must be lowerthan '+ max + ' characters');    } else {        showSuccess(edit_descriptions);        valid = true;    }    return valid;}//Trigger validation checkEditform.addEventListener('input', function (e) {    switch (e.target.id) {        case 'editrolenm':            editRolenm(EditRolenm);            break;        case 'editdescriptions':            editDescriptions(EditDescription);            break;    }});// Prevent the form submitEditform.addEventListener('submit', function (e) {    e.preventDefault();    // validate form    let isRolenameValid = editRolenm(EditRolenm),        isDescrptionValid = editDescriptions(EditDescription);    let isFormValid = isRolenameValid&&isDescrptionValid;    // submit to the server if the form is valid    if (isFormValid) {        var formdata = {roleid:Roleid.value, rolenm:EditRolenm.value, descriptions:EditDescription.value};        $.ajax({            url: "/api/admin/role/postEdit",            type: 'POST',            enctype: 'multipart/form-data',            dataType: 'json',            data: JSON.stringify(formdata),            cache: false,            contentType:'application/json',            processData: false,            success: function (result) {                if (result.title === 'error') {                    Swal.fire({                        postition: 'top-end',                        icon: result.title,                        title: result.message,                        showConfirmButton: true                    });                }                else{                    Swal.fire({                        postition: 'top-end',                        icon: result.title,                        title: result.message,                        showConfirmButton: false,                        timer: 1000                    });                    setTimeout("location.reload(true);", 1000);                }            }        });    }});// delete rolefunction deleteRole(elem) {    var roleid = elem.querySelector('input').value;    Swal.fire({        title: 'Do you want to delete ?',        showDenyButton: true,        showCancelButton: false,        confirmButtonText: `Yes`,        denyButtonText: `No`,    }).then((result) => {        /* Read more about isConfirmed, isDenied below */        if (result.isConfirmed) {            $.ajax({                type: 'post',                url: '/api/admin/role/roleDelete/' + roleid,                success: function() {                    Swal.fire('Deleted!', '', 'success');                    setTimeout("location.reload(true);", 1000);                }            })        } else if (result.isDenied) {            Swal.fire('Nothing have been deleted', '', 'info');        }    });}