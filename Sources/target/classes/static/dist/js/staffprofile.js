const editFullname = document.querySelector('#editfullname');const editEmail = document.querySelector('#editemail');const editCompanyEmail = document.querySelector('#editcompanyemail');const editGender = document.querySelector('#editgender');const editDoB = document.querySelector('#editdob');const editMobilePhone = document.querySelector('#editmobilephone');const editavatar = document.querySelector('#editavatar');const editIdCard = document.querySelector('#editidcard');const editAddress = document.querySelector('#editaddress');const editDateIssue = document.querySelector('#editdateissue');const editPlaceIssue = document.querySelector('#editplaceissue');const editContract = document.querySelector('#editcontract');const editPass = document.querySelector('#StaffPass');const RePass = document.querySelector('#ReStaffPass');const editForm = document.querySelector('#editStaffForm');const required = value => value === '' ? false : true;const between = (length, min, max) => length < min || length > max ? false : true;const EmailValid = (email) => {    const regex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,3}))$/;    return regex.test(email);};const NameValid = (name) => {    const regex = /^(([a-zA-Z]+[ ]{1}|[a-zA-Z]+|[])+)$/;    return regex.test(name);};const NoSpecialCharacter = (name) =>{    const regex = /^(([a-zA-Z0-9]+[ ]|[a-zA-Z0-9]+|[])+)$/;    return regex.test(name);};const NumberValid = (number) =>{    const regex = /^[0-9]+$/;    return regex.test(number);}const PhoneValid = (phone) => {    const regex = /^(0)(3[2-9]|5[6|8|9]|7[0|6-9]|8[0-6|8|9]|9[0-4|6-9])[0-9]+$/;    return regex.test(phone);};const DateValid = (date) => {    const currentDate = new Date();    const inputDate = new Date(date.value);    if (inputDate.getFullYear() == currentDate.getFullYear()) {        if (inputDate.getMonth() == currentDate.getMonth()) {            if (inputDate.getDate() < currentDate.getDate()) {                return true;            } else {                return false;            }        } else if (inputDate.getMonth() < currentDate.getMonth()) {            return true;        } else {            return false;        }    } else if (inputDate.getFullYear() < currentDate.getFullYear()) {        return true;    } else {        return false;    }};const OldValid = (date) => {    const currentDate = new Date();    const inputDate = new Date(date.value);    if ((currentDate.getFullYear() - inputDate.getFullYear()) < 18) {        return false;    } else {        return true;    }};const showError = (input, message) => {    const formField = input.parentElement;    input.classList.remove('is-valid');    input.classList.add('is-invalid');    input.focus();    formField.classList.remove('success');    formField.classList.add('error');    // show message error with wrong input    const error = formField.querySelector('small');    error.classList.add('text-danger');    error.textContent = message;};const showSuccess = (input) => {    const formField = input.parentElement;    input.classList.remove('is-invalid');    input.classList.add('is-valid');    formField.classList.remove('error');    formField.classList.add('success');    // hide message error    const error = formField.querySelector('small');    error.textContent = ''; // assign null value to hide error message};const showNormal = (input) => {    const formField = input.parentElement;    input.classList.remove('is-invalid');    input.classList.remove('is-valid');    formField.classList.remove('error');    formField.classList.remove('success');    // hide message error    const error = formField.querySelector('small');    error.textContent = ''; // assign null value to hide error message};// Validate Last nameconst checkFullname = (full_name) => {    let valid = false;    const min = 2,        max = 50;    const fullname = full_name.value;    if (!required(fullname)) {        showError(full_name, 'Full Name cannot be blank !');    } else if (!between(fullname.length, min, max)) {        showError(full_name, 'Full Name must be between ' + min + ' and ' + max + ' characters');    } else if (!NameValid(fullname)) {        showError(full_name, 'Full Name must not have number or special character');    } else {        showSuccess(full_name);        valid = true;    }    return valid;}// Validate Emailconst checkEmail = (staff_eamil) => {    let valid = false;    const email = staff_eamil.value.trim();    if (!required(email)) {        showError(staff_eamil, 'Email cannot be blank !');    } else if (!EmailValid(email)) {        showError(staff_eamil, 'Email is invalid !');    } else {        showSuccess(staff_eamil);        valid = true;    }    return valid;};// Validate Company Emailconst checkCompanyemail = (company_email) => {    let valid = false;    const companyemail = company_email.value.trim();    if (!required(companyemail)) {        showError(company_email, 'Company email cannot be blank !');    } else if (!EmailValid(companyemail)) {        showError(company_email, 'Company email is invalid !');    } else {        showSuccess(company_email);        valid = true;    }    return valid;};// Validate Addressconst checkAddress = (staff_address) => {    let valid = false;    min = 0;    max = 200;    const address = staff_address.value;    if (!between(address.length, min, max)) {        showError(staff_address, 'Address can only contain ' + max + ' character');    } else if (required(address) && between(address.length, min, max)) {        showSuccess(staff_address);        valid = true;    } else if (!required(address)) {        showNormal(staff_address);        valid = true;    }    return valid;};// Validate Day of birthconst checkDoB = (staff_dob) => {    let valid = false;    const dob = staff_dob.value;    if (!required(dob)) {        showError(staff_dob, 'Day Of Birth cannot be blank !');    } else if (!DateValid(staff_dob)) {        showError(staff_dob, 'Day Of Birth cannot greater than today');    } else if(!OldValid(staff_dob)){        showError(staff_dob, 'Must have equal 18 year old');    } else {        showSuccess(staff_dob);        valid = true;    }    return valid;};// Validate genderconst checkGender = (staff_gender) => {    let valid = false;    const gender = staff_gender.value;    if (!required(gender)) {        showError(staff_gender, 'Gender cannot be blank !');    } else {        showSuccess(staff_gender);        valid = true;    }    return valid;};// Validate Mobile Phoneconst checkMobilePhone = (staff_phone) => {    let valid = false;    const mobilephone = staff_phone.value;    min = 10;    max = 10;    if (!required(mobilephone)) {        showError(staff_phone, 'Mobile Phone cannot be blank !');    } else if (!PhoneValid(mobilephone)) {        showError(staff_phone, 'Mobile Phone is invalid !');    } else if (!between(mobilephone.length, min, max)) {        showError(staff_phone, 'Mobile Phone must be 10 number !');    } else {        showSuccess(staff_phone);        valid = true;    }    return valid;};//validate Avatar for edit formconst checkEditAvatar = (staff_avatar) => {    let valid = false;    const min = 3, max = 100;    const avatar = staff_avatar.value;    var allowedExtensions = /(\.jpg|\.jpeg|\.png|\.gif)$/i;    if (!required(avatar)) {        valid = true;    } else if (!allowedExtensions.exec(avatar)) {        staff_avatar.value = '';        showError(staff_avatar, 'Avatar must be a .jpg, .png or .jpeg ');    } else if (staff_avatar.files[0].size > (1024 * 1000)) {        showError(staff_avatar, 'Avatar too large. Size cannot greater 1MB !');    } else {        showSuccess(staff_avatar);        valid = true;    }    return valid;};// Validate IdCardconst checkIdCard = (id_card) => {    let valid = false;    const idcard = id_card.value;    if (!required(idcard)) {        showError(id_card, 'IDCard cannot be blank !');    }else if(!NumberValid(idcard)){        showError(id_card, "IDCard must be number");    }else {        showSuccess(id_card);        valid = true;    }    return valid;};// Validate DateIssueconst checkDateIssue = (date_issue) => {    let valid = false;    const dateissue = date_issue.value;    if (!required(dateissue)) {        showError(date_issue, 'Date issue cannot be blank !');    } else if (!DateValid(date_issue)) {        showError(date_issue, 'Date issue cannot greater than today !');    } else {        showSuccess(date_issue);        valid = true;    }    return valid;};// Validate PlaceIssueconst checkPlaceIssue = (place_issue) => {    let valid = false;    const placeissue = place_issue.value;    if (!required(placeissue)) {        showError(place_issue, 'Place of issue cannot be blank !');    }else if(!NoSpecialCharacter(placeissue)){        showError(place_issue, 'Place of issue cannot include special character');    }    else {        showSuccess(place_issue);        valid = true;    }    return valid;};// Validate Contractconst checkContract = (staff_contract) => {    let valid = false;    const min = 5,        max = 50;    const contract = staff_contract.value;    if (!required(contract)) {        showError(staff_contract, 'Contract cannot be blank !');    } else if (!between(contract.length, min, max)) {        showError(staff_contract, 'Contract must be between ' + min + ' and ' + max + ' characters');    }else if(!NoSpecialCharacter(contract)){        showError(staff_contract, 'Contract cannot include special character');    }    else {        showSuccess(staff_contract);        valid = true;    }    return valid;};// Validate Passwaordconst checkPass = (staff_pass,re_staff_pass) => {    let valid = false;    const pass = staff_pass.value;    const repass = re_staff_pass.value;    if (!required(pass)) {        showNormal(staff_pass);        showNormal(re_staff_pass);        valid = true;    } else if (repass!=pass) {        showError(re_staff_pass,"Please enter the same password");        showNormal(staff_pass);        valid = false;    } else if (repass==pass) {        showSuccess(staff_pass);        showSuccess(re_staff_pass);        valid = true;    } else if (required(pass)) {        showSuccess(staff_pass);        showSuccess(re_staff_pass);        valid = true;    }    return valid;};editForm.addEventListener('submit', function (e) {    e.preventDefault();    // validate form    let isFullnameValid = checkFullname(editFullname),        isEmailValid = checkEmail(editEmail),        isCompanyEmailValid = checkCompanyemail(editCompanyEmail),        isDoBValid = checkDoB(editDoB),        isGenderValid = checkGender(editGender),        isAddressValid = checkAddress(editAddress),        isMobilePhoneValid = checkMobilePhone(editMobilePhone),        isAvatarValid = checkEditAvatar(editavatar),        isICardValid = checkIdCard(editIdCard),        isDateIssueValid = checkDateIssue(editDateIssue),        isPlaceIssueValid = checkPlaceIssue(editPlaceIssue),        isContractValid = checkContract(editContract),        isResetPassValid = checkPass(editPass,RePass);    let isFormValid =isContractValid&&isCompanyEmailValid&&isFullnameValid && isEmailValid && isDoBValid && isGenderValid  && isMobilePhoneValid && isAddressValid && isAvatarValid && isICardValid && isDateIssueValid && isPlaceIssueValid && isResetPassValid;    // submit to the server if the form is valid    if (isFormValid) {        var formdata = new FormData(this);        $.ajax({            url: "/api/admin/staff/postEdit",            type: 'PUT',            enctype: 'multipart/form-data',            dataType: 'json',            data: formdata,            cache: false,            contentType: false,            processData: false,            success: function (result) {                if (result.title === 'error') {                    Swal.fire({                        postition: 'top-end',                        icon: result.title,                        title: result.message,                        showConfirmButton: true                    });                }                else{                    Swal.fire({                        postition: 'top-end',                        icon: result.title,                        title: result.message,                        showConfirmButton: false,                        timer: 1000                    });                    setTimeout("location.reload(true);", 1000);                }            }        });    }});editForm.addEventListener('input', function (e) {    switch (e.target.id) {        case 'editfullname':            checkFullname(editFullname);            break;        case 'editemail':            checkEmail(editEmail);            break;        case 'editcompanyemail':            checkCompanyemail(editCompanyEmail);            break;        case 'editdob':            checkDoB(editDoB);            break;        case 'editgender':            checkGender(editGender);            break;        case 'editaddress':            checkAddress(editAddress);            break;        case 'editmobilephone':            checkMobilePhone(editMobilePhone);            break;        case 'editavatar':            checkAvatar(editavatar);            break;        case 'editidcard':            checkIdCard(editIdCard);            break;        case 'editdateissue':            checkDateIssue(editDateIssue);            break;        case 'editplaceissue':            checkPlaceIssue(editPlaceIssue);            break;        case 'ReStaffPass':            checkPass(editPass,RePass);            break;        case 'editcontract':            checkContract(editContract);            break;    }});