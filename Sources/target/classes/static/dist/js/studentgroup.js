// -------------------------------------------------------Variable Definition In Student Groupconst formCreateStudentGroup = document.querySelector('#studentGroupCreate');const formUpdateStudentGroup = document.querySelector('#studentGroupUpdate');const createBranchCampusC = document.querySelector('#branchCampusC');const createCoursesC = document.querySelector('#CoursesC');const createSessionC = document.querySelector('#SessionC');const createShiftC = document.querySelector('#ShiftC');const createOpeningDate = document.querySelector('#OpeningDateC');const updateBranchCampusC = document.querySelector('#branchCampusU');const updateCoursesU = document.querySelector('#CoursesU');const updateSessionU = document.querySelector('#SessionU');const updateShiftU = document.querySelector('#ShiftU');const updateOpeningDate = document.querySelector('#OpeningDateU');var checkAction = [];var blockTT = '';$(document).ready(function () {    getAllBranchSearch();    getAllBranchCampusCreate();    getAllBranchCampusUpdate();    // getAllCoursesCreate();    // getAllCoursesUpdate();    getAllRoom();    $("#divBranchStudentGroupS").hide();    $("#divSubjectStudentGroupS").hide();    $("#divCoursesStudentGroupS").hide();    $('#optionSearchSG').val('allOptionSearchSG');    runFirst();});// Function Search$("#optionSearchSG").on("change", function () {    $("#BranchStudentGroupS").val('0');    $("#SubjectStudentGroupS").val('0');    $("#CoursesStudentGroupS").val('0');});$("#BranchStudentGroupS").on("change", function () {    switch ($("#optionSearchSG").val()) {        case "SubjectOptionSearchSG":            getSubjectByBranchSearch($(this).val());            break;        case "CoursesOptionSearchSG":            getCoursesByBranchSearch($(this).val());            break;    }});// Function Create$("#branchCampusC").on("change", function () {    getCoursesByBranchCreate(($(this).val()).slice(($(this).val()).indexOf('_') + 1));});$("#ShiftC").on("change", function () {    $("#OpeningDateC").val(null);});// Function Update$("#branchCampusU").on("change", function () {    getCoursesByBranchUpdate(($(this).val()).slice(($(this).val()).indexOf('_') + 1));});//Get All Roomfunction getAllRoom() {    $.ajax({        url: '/api/admin/studentgroup/getAllRoom',        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="0" selected>--- Select Room ---</option>';            for (var i in result) {                option += '<option class="roomCStuGrop" value="' + result[i].roomid + '">' + result[i].roomnm + '</option>';            }            $("#RoomC").html(option);        }    });}// -------------------------------------------------------Validate All Form In Student Groupconst required = value => value === '' ? false : true;const DateValid = (date) => {    const currentDate = new Date();    const inputDate = new Date(date.value);    if (inputDate.getFullYear() == currentDate.getFullYear()) {        if (inputDate.getMonth() == currentDate.getMonth()) {            if (inputDate.getDate() >= currentDate.getDate()) {                return true;            } else {                return false;            }        } else if (inputDate.getMonth() > currentDate.getMonth()) {            return true;        } else {            return false;        }    } else if (inputDate.getFullYear() > currentDate.getFullYear()) {        return true;    } else {        return false;    }};const showError = (input, message) => {    const formField = input.parentElement;    input.classList.remove('is-valid');    input.classList.add('is-invalid');    input.focus();    formField.classList.remove('success');    formField.classList.add('error');    // show message error with wrong input    const error = formField.querySelector('small');    error.classList.add('text-danger');    error.textContent = message;};const showSuccess = (input) => {    const formField = input.parentElement;    input.classList.remove('is-invalid');    input.classList.add('is-valid');    formField.classList.remove('error');    formField.classList.add('success');    // hide message error    const error = formField.querySelector('small');    error.textContent = ''; // assign null value to hide error message};const check_option = (value) => {    if (value == 0) {        return false;    } else {        return true;    }}//Check Option Of Shiftconst check_option_shift = (value) => {    if (value == '0Shift') {        return false;    } else {        return true;    }}//Check Select Shiftconst checkSelectShift = (param, mess) => {    var rs = false;    const paramid = param.value;    if (check_option_shift(paramid) == false) {        showError(param, mess + ' can not be blank');    } else {        showSuccess(param);        rs = true;    }    return rs;}//Check Select Allconst checkSelect = (param, mess) => {    var rs = false;    const paramid = param.value;    if (check_option(paramid) == false) {        showError(param, mess + ' can not be blank');        console.log("Select vao day");    } else {        showSuccess(param);        rs = true;    }    return rs;}// Validate Shiftconst checkShift = (inputDate, optionShift) => {    var rs = false;    const vDate = new Date(inputDate);    console.log("Get date " + vDate.getDay());    if (optionShift == 0) {        if (vDate.getDay() == 1 || vDate.getDay() == 3 || vDate.getDay() == 5) {            rs = true;        } else {            rs = false;        }    } else if (optionShift == 1) {        if (vDate.getDay() == 2 || vDate.getDay() == 4 || vDate.getDay() == 6) {            rs = true;        } else {            rs = false;        }    }    return rs;}// Validate Opening Datefunction checkOpeningDate(inputDate, inputShift) {    var vinputDate = new Date(inputDate.value);    var vinptuShift = inputShift.value;    var rs = false;    console.log(vinputDate);    if (!required(vinputDate)) {        console.log("vao 33");        showError(inputDate, 'Opening date cannot be blank !');        rs = false;    } else if ($("#ShiftC").val() == '0Shift') {        console.log("vao 44");        showError(inputDate, 'Please select Shift before choosing a date !');        rs = false;    } else if (!DateValid(inputDate)) {        console.log("vao 22");        showError(inputDate, 'Opening date cannot less than today !');        rs = false;    } else if (checkShift(vinputDate, vinptuShift) == false) {        console.log("vao 11");        var chooseShift = Number(vinptuShift) == 0 ? '2-4-6' : '3-5-7';        showError(inputDate, inputDate.value + ' does not match session. Choose ' + chooseShift);        rs = false;    } else {        showSuccess(inputDate);        rs = true;    }    return rs;}// Validate Opening Date Updatefunction checkOpeningDateUpdate(inputDate, inputShift) {    var vinputDate = new Date(inputDate.value);    var vinptuShift = inputShift.value;    var rs = false;    console.log(vinputDate);    if (!required(vinputDate)) {        console.log("vao 33");        showError(inputDate, 'Opening date cannot be blank !');        rs = false;    } else if ($("#ShiftU").val() == '0Shift') {        console.log("vao 44");        showError(inputDate, 'Please select Shift before choosing a date !');        rs = false;    } else if (!DateValid(inputDate)) {        console.log("vao 22");        showError(inputDate, 'Opening date cannot less than today !');        rs = false;    } else if (checkShift(vinputDate, vinptuShift) == false) {        console.log("vao 11");        var chooseShift = Number(vinptuShift) == 0 ? '2-4-6' : '3-5-7';        showError(inputDate, inputDate.value + ' does not match session. Choose ' + chooseShift);        rs = false;    } else {        showSuccess(inputDate);        rs = true;    }    return rs;}// -------------------------------------------------------General Use Function In Student Group// -------------------------------------------------------Create Student Group//Get All Branch Campus In Function Createfunction getAllBranchCampusCreate() {    $.ajax({        url: '/api/admin/studentgroup/getAllBranchCampus',        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            console.log(result);            var option = '<option value="0" selected>--- Select Capmus ---</option>';            for (var i in result) {                option += '<option class="branchCampusCStuGrop" value="' + result[i].branchcamid + '_' + result[i].branchid + '">' + result[i].branchcamnm + '</option>';            }            $("#branchCampusC").html(option);        }    });}//Get Courses By Branch In Function Createfunction getCoursesByBranchCreate(branchID) {    $.ajax({        url: '/api/admin/studentgroup/getCourseByBranch/' + branchID,        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="0" selected>--- Select Course ---</option>';            for (var i in result) {                option += '<option class="courseCStuGrop" value="' + result[i].courid + '">' + result[i].cournm + '</option>';            }            $("#CoursesC").html(option);        }    });}//Create FunctionformCreateStudentGroup.addEventListener('input', function (e) {    switch (e.target.id) {        case 'branchCampusC':            checkSelect(createBranchCampusC, 'Campus');            break;        case 'CoursesC':            checkSelect(createCoursesC, 'Courses');            break;        case 'SessionC':            checkSelect(createSessionC, 'Session');            break;        case 'ShiftC':            checkSelectShift(createShiftC, 'Shift');            break;        case 'OpeningDateC':            checkOpeningDate(createOpeningDate, createShiftC);            break;    }});formCreateStudentGroup.addEventListener('submit', function (e) {    e.preventDefault();    let isBranchCampusValid = checkSelect(createBranchCampusC, 'Campus'),        isCoursesValid = checkSelect(createCoursesC, 'Courses'),        isSessionValid = checkSelect(createSessionC, 'Session'),        isShiftValid = checkSelectShift(createShiftC, 'Shift');    isOpeningDateValid = checkOpeningDate(createOpeningDate, createShiftC);    let isFormValid = isBranchCampusValid && isCoursesValid && isSessionValid && isShiftValid && isOpeningDateValid;    // submit to the server if the form is valid    console.log(isFormValid);    if (isFormValid) {        var formdata = {            branchcampus: ($('#branchCampusC').val()).slice(0, ($('#branchCampusC').val()).indexOf('_')),            session: $('#SessionC').val(),            shift: $('#ShiftC').val(),            courid: $('#CoursesC').val(),            openingdate: $('#OpeningDateC').val()        }        console.log(formdata);        $.ajax({            type: 'POST',            url: '/api/admin/studentgroup/createStudentGroup',            data: JSON.stringify(formdata),            dataType: 'json',            contentType: 'application/json',            success: function (result) {                Swal.fire({                    position: 'center',                    icon: 'success',                    title: 'Create Student Group Success',                    showConfirmButton: false,                    timer: 1000                });                setTimeout("location.reload(true);", 1000);            },            error: function () {                Swal.fire({                    position: 'center',                    icon: 'error',                    title: 'Error',                    showConfirmButton: false,                    timer: 1000                });            }        });    }});// -------------------------------------------------------Update Student Group//Get All Branch Campus In Function Createfunction getAllBranchCampusUpdate() {    $.ajax({        url: '/api/admin/studentgroup/getAllBranchCampus',        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            console.log(result);            var option = '<option value="0" selected>--- Select Capmus ---</option>';            for (var i in result) {                option += '<option class="branchCampusUStuGrop" value="' + result[i].branchcamid + '_' + result[i].branchid + '">' + result[i].branchcamnm + '</option>';            }            $("#branchCampusU").html(option);        }    });}//Get All Course Of Update Functionfunction getCoursesByBranchUpdate(branchID) {    $.ajax({        url: '/api/admin/studentgroup/getCourseByBranch/' + branchID,        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="0" selected>--- Select Course ---</option>';            for (var i in result) {                option += '<option class="courseUStuGrop" value="' + result[i].courid + '">' + result[i].cournm + '</option>';            }            $("#CoursesU").html(option);        }    });}//Find Student Group By Id In Function Updatefunction findStudentGroup(elem) {    var id = elem.querySelector('input').value;    $.ajax({        type: 'GET',        url: '/api/admin/studentgroup/getDataByStudentGroupID/' + id,        datatype: "JSON",        data: '',        success: function (result) {            $('#studengroupidUStuGrop').val(id);            $('#branchCampusU select').val(0);            $('#OpeningDateU').val(result.openingdate);            $('#SessionU').val(result.session);            $('#CoursesU select').val(0);            $('#ShiftU').val(result.shift);        }    });}//Update FunctionformUpdateStudentGroup.addEventListener('input', function (e) {    switch (e.target.id) {        case 'branchCampusU':            checkSelect(updateBranchCampusC, 'Campus');        case 'CoursesU':            checkSelect(updateCoursesU, 'Courses');            break;        case 'SessionU':            checkSelect(updateSessionU, 'Session');            break;        case 'ShiftU':            checkSelectShift(updateShiftU, 'Shift');            break;        case 'OpeningDateU':            checkOpeningDateUpdate(updateOpeningDate, updateShiftU);            break;    }});formUpdateStudentGroup.addEventListener('submit', function (e) {    e.preventDefault();    let isCampusValid = checkSelect(updateBranchCampusC, 'Campus'),        isCoursesValid = checkSelect(updateCoursesU, 'Courses'),        isSessionValid = checkSelect(updateSessionU, 'Session'),        isShiftValid = checkSelectShift(updateShiftU, 'Shift'),        isOpeningDateValid = checkOpeningDateUpdate(updateOpeningDate, updateShiftU);    let isFormValid = isCampusValid && isCoursesValid && isSessionValid && isShiftValid && isOpeningDateValid;    // submit to the server if the form is valid    console.log(isFormValid);    if (isFormValid) {        var formdata = {            stugroid: $('#studengroupidUStuGrop').val(),            openingdate: $('#OpeningDateU').val(),            session: $('#SessionU').val(),            shift: $('#ShiftU').val(),            courid: $('#CoursesU').val(),            branchcampus: ($('#branchCampusU').val()).slice(0, ($('#branchCampusU').val()).indexOf('_'))        }        console.log(formdata);        $.ajax({            type: 'POST',            url: '/api/admin/studentgroup/updateStudentGroup',            data: JSON.stringify(formdata),            dataType: 'json',            contentType: 'application/json',            success: function (result) {                Swal.fire({                    position: 'center',                    icon: 'success',                    title: 'Update Student Group Success',                    showConfirmButton: false,                    timer: 1000                });                setTimeout("location.reload(true);", 1000);            },            error: function () {                Swal.fire({                    position: 'center',                    icon: 'error',                    title: 'Error',                    showConfirmButton: false,                    timer: 1000                });            }        });    }});// -------------------------------------------------------Delete Student Group//Delete Functionfunction deleteStudentGroup(elem) {    var id = elem.querySelector('input').value;    Swal.fire({        title: 'Do you want to delete ?',        showDenyButton: true,        confirmButtonText: `Yes`,        denyButtonText: `No`,    }).then((result) => {        /* Read more about isConfirmed, isDenied below */        if (result.isConfirmed) {            $.ajax({                type: 'POST',                url: '/api/admin/studentgroup/removeStudentGroup/' + id,                success: function () {                    Swal.fire('Saved!', '', 'success');                    setTimeout("location.reload(true);", 1000);                }            })        } else if (result.isDenied) {            Swal.fire('Changes are not saved', '', 'info');        }    })}// -------------------------------------------------------Search Student Group// Get All Branchfunction getAllBranchSearch() {    $.ajax({        url: '/api/admin/studentgroup/getAllBranch',        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="0" selected>--- Select Branch ---</option>';            for (var i in result) {                option += '<option class="branchCStuGropFuncSearch" value="' + result[i].branchid + '">' + result[i].branchnm + '</option>';            }            $("#BranchStudentGroupS").html(option);        }    });}//Get Course By Branch In Function Searchfunction getCoursesByBranchSearch(branchID) {    $.ajax({        url: '/api/admin/studentgroup/getCourseByBranch/' + branchID,        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="0" selected>--- Select Course ---</option>';            for (var i in result) {                option += '<option class="courseCStuGropFuncSearch" value="' + result[i].courid + '">' + result[i].cournm + '</option>';            }            $("#CoursesStudentGroupS").html(option);        }    });}//Get Subject By Branch In Function Searchfunction getSubjectByBranchSearch(branchID) {    $.ajax({        url: '/api/admin/studentgroup/getSubjectByBranch/' + branchID,        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var option = '<option value="0" selected>--- Select Subject ---</option>';            for (var i in result) {                option += '<option class="subjectCStuGropFuncSearch" value="' + result[i].subjid + '">' + result[i].shortnm + '-' + result[i].subjnm + '</option>';            }            $("#SubjectStudentGroupS").html(option);        }    });}//Amount Student In Student Groupfunction getAmountStudentInStudentGroup(studentgroupID) {    var amountStudentInStudenGroup = 0;    $.ajax({        url: '/api/admin/studentgroup/amountStudentInStuGrou/' + studentgroupID,        type: "GET",        datatype: "JSON",        data: '',        async: false,        success: function (result) {            amountStudentInStudenGroup = result;        }    });    return amountStudentInStudenGroup;}$("#optionSearchSG").on("change", function () {    switch ($('#optionSearchSG').val()) {        case 'allOptionSearchSG':            $("#divBranchStudentGroupS").hide();            $("#divSubjectStudentGroupS").hide();            $("#divCoursesStudentGroupS").hide();            break;        case 'SubjectOptionSearchSG':            $("#divBranchStudentGroupS").show();            $("#divSubjectStudentGroupS").show();            $("#divCoursesStudentGroupS").hide();            break;        case 'CoursesOptionSearchSG':            $("#divBranchStudentGroupS").show();            $("#divSubjectStudentGroupS").hide();            $("#divCoursesStudentGroupS").show();            break;    }});$("#btnSearchStudentGroup").click(function () {    var option, subjectid, coursesID;    var resultURL = '/api/admin/studentgroup';    option = $('#optionSearchSG').val();    switch (option) {        case 'allOptionSearchSG':            resultURL += '/getAllStudentGroup';            console.log(resultURL);            break;        case 'SubjectOptionSearchSG':            subjectid = $('#SubjectStudentGroupS').val();            resultURL += '/getAllStudentGroupBySubject/' + subjectid;            break;        case 'CoursesOptionSearchSG':            coursesID = $('#CoursesStudentGroupS').val();            resultURL += '/getAllStudentGroupByCourses/' + coursesID;            break;    }    console.log(resultURL);    $.ajax({        url: resultURL,        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var shift = "";            var dateofweek = "";            var blockTT = '<div class="table-responsive"><table id="tabledb1" class="table table-vcenter table-bordered card-table' +                ' table-striped display"><thead><tr><th>No.</th><th>Student Group</th><th>Openning' +                ' Date</th><th>Session</th><th>Shift</th><th>Courses</th><th>Branch</th><th>Campus</th><th' +                ' width="240px;">Location</th><th>Status</th><th>Student</th><th>Action</th></tr></thead><tbody>';            if (Number(result.length) > 0) {                for (var index = 0; index < result.length; index++) {                    console.log('object :>> ' + result[index].stugroid);                    var amountStudent = getAmountStudentInStudentGroup(result[index].stugroid);                    if (result[index].shift == 0) {                        shift = "Monday - Wednesday - Friday";                    } else {                        shift = "Tuesday - Thursday - Saturday";                    }                    switch (result[index].session) {                        case 'M':                            dateofweek = "Morning";                            break;                        case 'A':                            dateofweek = "Afternoon";                            break;                        case 'N':                            dateofweek = "Night";                            break;                    }                    blockTT += '<tr><td>' + (index + 1) +                        '</td><td>' + result[index].stugronm +                        '</td><td>' + result[index].openingdate +                        '</td><td>' + dateofweek +                        '</td><td>' + shift +                        '</td><td>' + result[index].cournm +                        '</td><td>' + result[index].branchnm +                        '</td><td>' + result[index].branchcamnm +                        '</td><td>' + result[index].address +                        '</td><td>';                    if (Number(result[index].checkupde) <= 0) {                        blockTT += '<span class="badge bg-primary">No Timetable</span></td>';                    } else if (result[index].stugronm === 'T2.0207.M0') {                        blockTT += '<span class="badge bg-info">Finished</span></td>';                    } else {                        blockTT += '<span class="badge bg-warning">Studying</span></td>';                    }                    if (amountStudent <= 0) {                        blockTT += '<td>' + amountStudent + '</td><td>';                        blockTT += '<button style="margin-right: 5px" class="btn btn-vk btn-icon" onclick="findStudentGroup(this)" data-bs-toggle="modal" data-bs-target="#modal-update-studentgroup"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M9 7h-3a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-3" /><path d="M9 15h3l8.5 -8.5a1.5 1.5 0 0 0 -3 -3l-8.5 8.5v3" /><line x1="16" y1="5" x2="19" y2="8" /></svg><input type="tel" hidden value="' + result[index].stugroid + '"></button><button class="btn btn-google btn-icon" onclick="deleteStudentGroup(this)"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M15 3v4a1 1 0 0 0 1 1h4" /><path d="M17 17h-6a2 2 0 0 1 -2 -2v-6m0 -4a2 2 0 0 1 2 -2h4l5 5v7c0 .294 -.063 .572 -.177 .823" /><path d="M16 17v2a2 2 0 0 1 -2 2h-7a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2" /><line x1="3" y1="3" x2="21" y2="21" /></svg><input type="tel" hidden value="' + result[index].stugroid + '"></button>';                    } else {                        blockTT += '<td>' + amountStudent + '</td><td>';                        blockTT += '<button style="margin-right: 5px" class="btn btn-vk btn-icon" disabled data-bs-toggle="modal" data-bs-target="#modal-update-studentgroup"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M9 7h-3a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-3" /><path d="M9 15h3l8.5 -8.5a1.5 1.5 0 0 0 -3 -3l-8.5 8.5v3" /><line x1="16" y1="5" x2="19" y2="8" /></svg></button><button class="btn btn-google btn-icon disabled"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M15 3v4a1 1 0 0 0 1 1h4" /><path d="M17 17h-6a2 2 0 0 1 -2 -2v-6m0 -4a2 2 0 0 1 2 -2h4l5 5v7c0 .294 -.063 .572 -.177 .823" /><path d="M16 17v2a2 2 0 0 1 -2 2h-7a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2" /><line x1="3" y1="3" x2="21" y2="21" /></svg></button>';                    }                    blockTT += '</td></tr>';                }            } else {                blockTT += '<tr><td colspan="12" style="text-align: center; vertical-align: middle;">No Data</td></tr>';            }            blockTT += '</tbody></table></div>';            $("#renderSG").html(blockTT);        }    });});const runFirst = () => {    $.ajax({        url: '/api/admin/studentgroup/getAllStudentGroup',        type: "GET",        datatype: "JSON",        data: '',        success: function (result) {            var shift = "";            var dateofweek = "";            var blockTT = '<div class="table-responsive"><table id="tabledb1" class="table table-vcenter table-bordered card-table' +                ' table-striped display"><thead><tr><th>No.</th><th>Student Group</th><th>Openning' +                ' Date</th><th>Session</th><th>Shift</th><th>Courses</th><th>Branch</th><th>Campus</th><th' +                ' width="240px;">Location</th><th>Status</th><th>Student</th><th>Action</th></tr></thead><tbody>';            if (Number(result.length) > 0) {                for (var index = 0; index < result.length; index++) {                    console.log('object :>> ' + result[index].stugroid);                    var amountStudent = getAmountStudentInStudentGroup(result[index].stugroid);                    if (result[index].shift == 0) {                        shift = "Monday - Wednesday - Friday";                    } else {                        shift = "Tuesday - Thursday - Saturday";                    }                    switch (result[index].session) {                        case 'M':                            dateofweek = "Morning";                            break;                        case 'A':                            dateofweek = "Afternoon";                            break;                        case 'N':                            dateofweek = "Night";                            break;                    }                    blockTT += '<tr><td>' + (index + 1) +                        '</td><td>' + result[index].stugronm +                        '</td><td>' + result[index].openingdate +                        '</td><td>' + dateofweek +                        '</td><td>' + shift +                        '</td><td>' + result[index].cournm +                        '</td><td>' + result[index].branchnm +                        '</td><td>' + result[index].branchcamnm +                        '</td><td>' + result[index].address +                        '</td><td>';                    if (Number(result[index].checkupde) <= 0) {                        blockTT += '<span class="badge bg-primary">No Timetable</span></td>';                    } else if (result[index].stugronm === 'T2.0207.M0') {                        blockTT += '<span class="badge bg-info">Finished</span></td>';                    } else {                        blockTT += '<span class="badge bg-warning">Studying</span></td>';                    }                    if (amountStudent <= 0) {                        blockTT += '<td>' + amountStudent + '</td><td>';                        blockTT += '<button style="margin-right: 5px" class="btn btn-vk btn-icon" onclick="findStudentGroup(this)" data-bs-toggle="modal" data-bs-target="#modal-update-studentgroup"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M9 7h-3a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-3" /><path d="M9 15h3l8.5 -8.5a1.5 1.5 0 0 0 -3 -3l-8.5 8.5v3" /><line x1="16" y1="5" x2="19" y2="8" /></svg><input type="tel" hidden value="' + result[index].stugroid + '"></button><button class="btn btn-google btn-icon" onclick="deleteStudentGroup(this)"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M15 3v4a1 1 0 0 0 1 1h4" /><path d="M17 17h-6a2 2 0 0 1 -2 -2v-6m0 -4a2 2 0 0 1 2 -2h4l5 5v7c0 .294 -.063 .572 -.177 .823" /><path d="M16 17v2a2 2 0 0 1 -2 2h-7a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2" /><line x1="3" y1="3" x2="21" y2="21" /></svg><input type="tel" hidden value="' + result[index].stugroid + '"></button>';                    } else {                        blockTT += '<td>' + amountStudent + '</td><td>';                        blockTT += '<button style="margin-right: 5px" class="btn btn-vk btn-icon" disabled data-bs-toggle="modal" data-bs-target="#modal-update-studentgroup"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M9 7h-3a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-3" /><path d="M9 15h3l8.5 -8.5a1.5 1.5 0 0 0 -3 -3l-8.5 8.5v3" /><line x1="16" y1="5" x2="19" y2="8" /></svg></button><button class="btn btn-google btn-icon disabled"><svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M15 3v4a1 1 0 0 0 1 1h4" /><path d="M17 17h-6a2 2 0 0 1 -2 -2v-6m0 -4a2 2 0 0 1 2 -2h4l5 5v7c0 .294 -.063 .572 -.177 .823" /><path d="M16 17v2a2 2 0 0 1 -2 2h-7a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2" /><line x1="3" y1="3" x2="21" y2="21" /></svg></button>';                    }                    blockTT += '</td></tr>';                }            } else {                blockTT += '<tr><td colspan="12" style="text-align: center; vertical-align: middle;">No Data</td></tr>';            }            blockTT += '</tbody></table></div>';            $("#renderSG").html(blockTT);        }    });}