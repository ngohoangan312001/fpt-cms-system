const showError = (input, message) => {    const formField = input.parentElement;    input.classList.remove('is-valid');    input.classList.add('is-invalid');    input.focus();    formField.classList.remove('success');    formField.classList.add('error');    // show message error with wrong input    const error = formField.querySelector('span');    error.textContent = message;};const showSuccess = (input) => {    const formField = input.parentElement;    input.classList.remove('is-invalid');    input.classList.add('is-valid');    formField.classList.remove('error');    formField.classList.add('success');    // hide message error    const error = formField.querySelector('span');    error.textContent = ''; // gán rỗng để ẩn message lỗi};//Check not nullconst check_input = (value) => {    if (value == '') {        return false;    } else {        return true;    }}//Check combo box different from 1 1const check_option = (value) => {    if (value == 0) {        return false;    } else {        return true;    }}//check with regexconst stringvalid = /^[a-zA-Z0-9\-]+$/;const stringonly = /^(([a-zA-Z]{1,}[a-zA-Z0-9-&.,():]{0,}([ ]|[a-zA-Z0-9-&.,():]{0,}|[])[a-zA-Z0-9-&.,():]{0,})+)$/;// get object from input form create + update subjectconst create_subjectname = document.querySelector('#create_SubjectName');const create_shortname = document.querySelector('#create_ShortName');const create_branch = document.querySelector('#create_Branch');const edit_subjectname = document.querySelector('#edit_SubjectName');const edit_shortname = document.querySelector('#edit_ShortName');const edit_branch = document.querySelector('#edit_Branch');// CRUD subject formconst formsubjectcreate = document.querySelector('#newsubject');const editsubjectbtn = document.querySelector('#editsubjectbtn');const formsubjectedit = document.querySelector('#editsubject');//----------Check field in form new subject-------------//Check Short nameconst check_new_shortname = () => {    var rs = false;    const shortname = create_shortname.value;    if (check_input(shortname) == false) {        showError(create_shortname, "Shortname can not blank");    } else if (!(stringonly.test(shortname))) {        showError(create_shortname, 'Shortname is invalid');    } else {        showSuccess(create_shortname);        rs = true;    }    return rs;}//Check Name Subjectconst check_new_namesubject = () => {    var rs = false;    const namesubject = create_subjectname.value;    if (check_input(namesubject) == false) {        showError(create_subjectname, 'Name Subject can not blank');    } else if (!(stringonly.test(namesubject))) {        showError(create_subjectname, 'Name subject is invalid');    } else {        showSuccess(create_subjectname);        rs = true;    }    return rs;}// Check branch subjectconst check_new_branch = () => {    var rs = false;    const branchid = create_branch.value;    if (check_option(branchid) == false) {        showError(create_branch, 'Branch subject can not be blank');    } else {        showSuccess(create_branch);        rs = true;    }    return rs;}//---------- check field in edit form subject------//Check Short nameconst check_edit_shortname = () => {    var rs = false;    const shortname = edit_shortname.value;    if (check_input(shortname) == false) {        showError(edit_shortname, "Shortname can not blank");    } else if (!(stringonly.test(shortname))) {        showError(edit_shortname, 'Shortname is invalid');    } else {        showSuccess(edit_shortname);        rs = true;    }    return rs;}//Check Name Subjectconst check_edit_namesubject = () => {    var rs = false;    const namesubject = edit_subjectname.value;    if (check_input(namesubject) == false) {        showError(edit_subjectname, 'Name Subject can not blank');    } else if (!(stringonly.test(namesubject))) {        showError(edit_subjectname, 'Name subject is invalid');    } else {        showSuccess(edit_subjectname);        rs = true;    }    return rs;}// check branch subjectconst check_edit_branch = () => {    var rs = false;    const branchid = edit_branch.value;    if (check_option(branchid) == false) {        showError(edit_branch, 'Branch subject can not be blank');    } else {        showSuccess(edit_branch);        rs = true;    }    return rs;}// check inputformsubjectcreate.addEventListener('input', function(e) {    switch (e.target.id) {        //check short name        case ('create_ShortName'):            check_new_shortname();            break;        //check Subject name        case ('create_SubjectName'):            check_new_namesubject();            break;        //check Group subject        case ('create_Branch'):            check_new_branch();            break;    }});// submit createformsubjectcreate.addEventListener('submit', function(e) {    e.preventDefault();    let is_shortnamevalid = check_new_shortname();    let is_namesubjectvalid = check_new_namesubject();    let is_branchvalid = check_new_branch();    let check_valid = is_shortnamevalid && is_namesubjectvalid && is_branchvalid;    if (check_valid == true) {        var formdata = {            shortnm: create_shortname.value.trim(),            subjnm: create_subjectname.value.trim(),            branchid: +create_branch.value,            removeat: 'No'        }        $.ajax({            url: "/api/admin/subject/subjectCreate",            type: 'POST',            data: JSON.stringify(formdata),            cache: false,            contentType: 'application/json; charset=UTF-8',            processData: false,            success: function(result) {                if (result.title === 'error') {                    Swal.fire({                        postition: 'top-end',                        icon: result.title,                        title: result.message,                        showConfirmButton: true                    })                } else {                    Swal.fire({                        position: 'center',                        icon: 'success',                        title: 'Your work has been saved',                        showConfirmButton: false,                        timer: 1500                    });                    setTimeout("location.reload(true);", 2000);                }            },            error: function() {                Swal.fire({                    position: 'center',                    icon: 'success',                    title: 'Your work has been saved',                    showConfirmButton: false,                    timer: 1500                });                setTimeout("location.reload(true);", 2000);            }        });    }});// update functionfunction doUpdateSubject(elem) {    var subjectid = elem.querySelector('input').value;    $.ajax({        type: 'GET',        url: '/api/admin/subject/subjectFind/' + subjectid,        success: function(result) {            $('#updatesubject #edit_idSubject').val(result.subjid);            $('#updatesubject #edit_SubjectName').val(result.subjnm);            $('#updatesubject #edit_ShortName').val(result.shortnm);            $('#updatesubject #edit_Branch').val(result.branchid)        }    });}formsubjectedit.addEventListener('input', function(e) {    switch (e.target.id) {        //check short name        case ('edit_ShortName'):            check_edit_shortname();            break;        //check Subject name        case ('edit_SubjectName'):            check_edit_namesubject();            break;        case ('edit_Branch'):            check_edit_branch();    }});formsubjectedit.addEventListener('submit', function(e) {    e.preventDefault();    var formdata = {        subjid: $('#updatesubject #edit_idSubject').val(),        shortnm: $('#updatesubject #edit_ShortName').val(),        subjnm: $('#updatesubject #edit_SubjectName').val(),        branchid: $('#updatesubject #edit_Branch').val(),        removeat: 'No'    }    $.ajax({        url: '/api/admin/subject/SubjectEdit',        type: 'PUT',        data: JSON.stringify(formdata),        cache: false,        contentType: 'application/json; charset=UTF-8',        processData: false,        success: function(result) {            if (result.title === 'error') {                Swal.fire({                    postition: 'top-end',                    icon: result.title,                    title: result.message,                    showConfirmButton: true                })            } else {                Swal.fire({                    position: 'center',                    icon: 'success',                    title: 'Your work has been saved',                    showConfirmButton: false,                    timer: 1500                });                setTimeout("location.reload(true);", 2000);            }        },        error: function() {            Swal.fire({                position: 'center',                icon: 'success',                title: 'Your work has been saved',                showConfirmButton: false,                timer: 1500            });            setTimeout("location.reload(true);", 2000);        }    });});//delete functionfunction deletesubject(elem) {    var subjectid = elem.querySelector('input').value;    Swal.fire({        title: 'Do you want to delete ?',        showDenyButton: true,        showCancelButton: false,        confirmButtonText: `Yes`,        denyButtonText: `No`,    }).then((result) => {        /* Read more about isConfirmed, isDenied below */        if (result.isConfirmed) {            $.ajax({                type: 'DELETE',                url: '/api/admin/subject/SubjectDelete/' + subjectid,                success: function() {                    Swal.fire('Saved!', '', 'success');                    setTimeout("location.reload(true);", 1000);                }            })        } else if (result.isDenied) {            Swal.fire('Changes are not saved', '', 'info');        }    });}